#!/bin/bash
# Script to execute Pr3Yunjian compiler generated by HACS 1.1.23

usage () {
  echo "Usage: $0 --scheme=Scheme [--sort=S | --output=file | --help | --verbose] (InputFile | --term=Program)" >&2
  exit 2
}

# SETUP.

# Information about package we are generating.
MODULE='edu.nyu.cs.cc.Pr3Yunjian'
NAME='Pr3Yunjian'
SORT='Program'
SORTS='Program Computed Instructions Integer ArgumentSignature Expression String Declaration Rs ExpressionListTail Label Instruction Local Regs Mem After1 Constant Type Integers TypeList TypeIdentifierTail Statement Identifier Declarations TypeListTail FT Statements ExpressionList Sign Reg IfTail Op Arg INT STR ID'
SINKCLASS='net.sf.crsx.text.TextSink'
PARSERCLASS='edu.nyu.cs.cc.Pr3YunjianParser'
PREFIX='pr3yunjian_'
METAPARSERCLASS='edu.nyu.cs.cc.Pr3YunjianHx'
METAPREFIX='pr3yunjianMeta_'
EMBEDPARSERCLASS='edu.nyu.cs.cc.Pr3YunjianEmbed'
EMBEDPREFIX='pr3yunjianEmbed_'
PACKAGE='edu.nyu.cs.cc'
PACKAGEDIR='edu/nyu/cs/cc'
BUILD='/home/yy1851/Compiler/Project/pr3/build'
REWRITER="$PACKAGEDIR/${NAME}Rewriter.crs"

# Information about HACS installation.
HACSVERSION='1.1.23'
CRSXJAR='/home/yy1851/.hacs/share/java/crsx.jar'
HACSJAR='/home/yy1851/.hacs/share/java/hacs.jar'
CRSXC='/home/yy1851/.hacs/lib/hacs/crsxc'

# System directories.
ICU4CINCLUDE='/home/yy1851/.hacs/lib/hacs/icu4c/include'
ICU4CDIR='/home/yy1851/.hacs/lib/hacs/icu4c/lib'

# Used system commands.
SHELL='/bin/bash'
JAVA='java'
JAVAC='javac'

# Command mode...
MODE="Print"

# Process options.
fail=false
options=""
inputoption=
outputoption=
for arg; do
    case "$arg" in
        --scheme=*) SCHEME="${arg#*=}" ;;
        --mode=*) MODE="${arg#*=}" ;;
        --sort=*) SORT="${arg#*=}" ;;
	--output=*) if [ -n "$outputoption" ]; then echo "${0}: At most one output allowed." >&2; fail=true; fi; outputoption="${arg#--}" ;;
	--input=*) if [ -n "$inputoption" ]; then echo "${0}: Only one input allowed." >&2; fail=true; fi; inputoption="${arg#--}" ;;
	--term=*) if [ -n "$inputoption" ]; then echo "${0}: Only one input allowed." >&2; fail=true; fi; inputoption="${arg#--}" ;;
	--parsed-file=*) parsedfile="${arg#*=}" ;;
        -v|--verbose) set -x ;;
        --verbose=*) set -x; options="$options '${arg#--}'" ;;
	-h|-help|--help) usage ;;
	--*) options="$options '${arg#--}'" ;;
        *) if [ -n "$inputoption" ]; then echo "${0}: Only one input allowed." >&2; usage; fi; inputoption="input=$arg" ;;
    esac
done

# CONSISTENCY.

if [ -z "$inputoption" ]; then
   echo "${0}: Missing input?" >&2
   fail=true
fi

# Check identity.
if [ -z "$MODULE" -o -z "$NAME" -o -z "$SORT" -o -z "$SORTS" -o -z -"$SINKCLASS" -o -z "$PARSERCLASS" -o -z "$PREFIX" -o -z -"$METAPARSERCLASS" -o -z "$METAPREFIX" \
     -o -z "$EMBEDPARSERCLASS" -o -z -"$EMBEDPREFIX" -o -z "$PACKAGE" -o -z "$PACKAGEDIR" -o -z "$BUILD" ]; then
   fail=true; echo "${0}: Panic: incomplete HACS installation?" >&2; fi

# Check environment.
if [ -z "$ICU4CDIR" -o ! -d "$ICU4CDIR" ]; then
   fail=true; echo "${0}: ICU4CDIR directory does not point to a directory (presumably with icu4c libraries)." >&2; fi
if [ -z "$ICU4CINCLUDE" -o ! -d "$ICU4CINCLUDE" ]; then
   fail=true; echo "${0}: ICU4CINCLUDE directory does not point to a directory (with icu4c headers)." >&2; fi
if [ -z "$JAVA" -o ! -x "$(which $JAVA)" ]; then
   fail=true; echo "${0}: JAVA parameter does not point to an executable (the Java interpreter)." >&2; fi
if [ -z "$JAVAC" -o ! -x "$(which $JAVAC)" ]; then
   fail=true; echo "${0}: JAVAC parameter does not point to an executable (the Java compiler)." >&2; fi
if [ -z "$CRSXJAR" -o ! -r "$CRSXJAR" ]; then
   fail=true; echo "${0}: CRSXJAR parameter does not point to a file (the CRSX Java archive)." >&2; fi
if [ -z "$BUILD" -o ! -d "$BUILD" ]; then
   fail=true; echo "${0}: BUILD parameter does not point to a directory." >&2; fi

# Check options.
if [ -z "$SORT" ]; then
   fail=true; echo "${0}: SORT must be correctly specified (use default or one of "Program Computed Instructions Integer ArgumentSignature Expression String Declaration Rs ExpressionListTail Label Instruction Local Regs Mem After1 Constant Type Integers TypeList TypeIdentifierTail Statement Identifier Declarations TypeListTail FT Statements ExpressionList Sign Reg IfTail Op Arg INT STR ID")" >&2
elif [ -z "$SCHEME" ]; then
   SCHEME="$NAME"'$'"$SORT";
fi

if $fail; then
    usage
fi

# RUN

# Make temporary term file (for parsed output).
parsedfile="${parsedfile:-$(mktemp)}"

# Parse!
eval "$JAVA -cp '$BUILD:$HACSJAR:$CRSXJAR' net.sf.crsx.run.Crsx allow-unnamed-rules 'grammar=(\"$PARSERCLASS\";)' 'category=$PREFIX$SORT' simple-terms '$inputoption' > $parsedfile"

# Check parse.

# Rewrite!
eval "$JAVA -cp '$BUILD:$HACSJAR:$CRSXJAR' net.sf.crsx.run.Crsx allow-unnamed-rules 'grammar=(\"net.sf.crsx.text.Text\";)' 'rules=$REWRITER' 'wrapper=\$$MODE-$SCHEME' 'sink=$SINKCLASS' $options 'input=$parsedfile' $outputoption trust-generated-variable-names omit-linear-variables"

# End of Pr3Yunjian compiler generated by HACS 1.1.23

