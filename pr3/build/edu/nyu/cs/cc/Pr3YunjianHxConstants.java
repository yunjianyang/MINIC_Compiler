/* Generated By:JavaCC: Do not edit this line. Pr3YunjianHxConstants.java */
package edu.nyu.cs.cc;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface Pr3YunjianHxConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int T_HX_CONCRETE = 76;
  /** RegularExpression Id. */
  int T_HX_PP_UNCONCRETE = 86;
  /** RegularExpression Id. */
  int T_HX_SEMI = 89;
  /** RegularExpression Id. */
  int T_HX_BAR = 90;
  /** RegularExpression Id. */
  int T_HX_LPAREN = 91;
  /** RegularExpression Id. */
  int T_HX_RPAREN = 92;
  /** RegularExpression Id. */
  int T_HX_STAR = 93;
  /** RegularExpression Id. */
  int T_HX_PLUS = 94;
  /** RegularExpression Id. */
  int T_HX_QUEST = 95;
  /** RegularExpression Id. */
  int T_HX_SUB = 96;
  /** RegularExpression Id. */
  int T_HX_DOT = 97;
  /** RegularExpression Id. */
  int T_HX_COLON = 98;
  /** RegularExpression Id. */
  int T_HX_LBRACE = 99;
  /** RegularExpression Id. */
  int T_HX_RBRACE = 100;
  /** RegularExpression Id. */
  int T_HX_LBRACKET = 101;
  /** RegularExpression Id. */
  int T_HX_RBRACKET = 102;
  /** RegularExpression Id. */
  int T_HX_COMMA = 103;
  /** RegularExpression Id. */
  int T_HX_FORALL = 104;
  /** RegularExpression Id. */
  int T_HX_ARROW = 105;
  /** RegularExpression Id. */
  int T_HX_UP = 106;
  /** RegularExpression Id. */
  int T_HX_DOWN = 107;
  /** RegularExpression Id. */
  int T_HX_NOT = 108;
  /** RegularExpression Id. */
  int T_HX_AT = 109;
  /** RegularExpression Id. */
  int T_HX_DOTTEDNAME = 110;
  /** RegularExpression Id. */
  int T_HX_AS = 111;
  /** RegularExpression Id. */
  int T_HX_ATTRIBUTE = 112;
  /** RegularExpression Id. */
  int T_HX_AUTOMATIC = 113;
  /** RegularExpression Id. */
  int T_HX_BINDS = 114;
  /** RegularExpression Id. */
  int T_HX_COMPOSE = 115;
  /** RegularExpression Id. */
  int T_HX_DATA = 116;
  /** RegularExpression Id. */
  int T_HX_DEFAULT = 117;
  /** RegularExpression Id. */
  int T_HX_FREE = 118;
  /** RegularExpression Id. */
  int T_HX_FRESH = 119;
  /** RegularExpression Id. */
  int T_HX_GLOBAL = 120;
  /** RegularExpression Id. */
  int T_HX_IMPORT = 121;
  /** RegularExpression Id. */
  int T_HX_MAIN = 122;
  /** RegularExpression Id. */
  int T_HX_MODULE = 123;
  /** RegularExpression Id. */
  int T_HX_PRIORITY = 124;
  /** RegularExpression Id. */
  int T_HX_RULE = 125;
  /** RegularExpression Id. */
  int T_HX_SCHEME = 126;
  /** RegularExpression Id. */
  int T_HX_SORT = 127;
  /** RegularExpression Id. */
  int T_HX_STATIC = 128;
  /** RegularExpression Id. */
  int T_HX_SUGAR = 129;
  /** RegularExpression Id. */
  int T_HX_SYMBOL = 130;
  /** RegularExpression Id. */
  int T_HX_TAG = 131;
  /** RegularExpression Id. */
  int T_HX_SPACE = 132;
  /** RegularExpression Id. */
  int T_HX_TOKEN = 133;
  /** RegularExpression Id. */
  int T_HX_FRAGMENT = 134;
  /** RegularExpression Id. */
  int T_HX_NESTED = 135;
  /** RegularExpression Id. */
  int T_HX_FRAGMENT_REF = 136;
  /** RegularExpression Id. */
  int T_HX_RE_NAME = 137;
  /** RegularExpression Id. */
  int T_HX_RE_WORD = 138;
  /** RegularExpression Id. */
  int T_HX_META = 139;
  /** RegularExpression Id. */
  int T_HX_VAR = 140;
  /** RegularExpression Id. */
  int T_HX_NATURAL = 141;
  /** RegularExpression Id. */
  int T_HX_INTEGER = 142;
  /** RegularExpression Id. */
  int T_HX_UNNATURAL = 143;
  /** RegularExpression Id. */
  int T_HX_STRING = 144;
  /** RegularExpression Id. */
  int T_HX_STRING1CHAR = 145;
  /** RegularExpression Id. */
  int T_HX_STRING2CHAR = 146;
  /** RegularExpression Id. */
  int T_HX_ESCAPEDCHAR = 147;
  /** RegularExpression Id. */
  int T_HX_HEX = 148;
  /** RegularExpression Id. */
  int T_HX_CHAR_CLASS = 149;
  /** RegularExpression Id. */
  int T_HX_CC_NOT = 150;
  /** RegularExpression Id. */
  int T_HX_CC_RBRACKET = 151;
  /** RegularExpression Id. */
  int T_HX_CC_DASH = 152;
  /** RegularExpression Id. */
  int T_HX_CC_OTHER = 153;
  /** RegularExpression Id. */
  int T_HX_CC_SKIP = 154;
  /** RegularExpression Id. */
  int T_HX_PP_CONCRETE_SPACE = 155;
  /** RegularExpression Id. */
  int T_HX_PP_CONCRETE_WORD = 156;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int HX_RE = 1;
  /** Lexical state. */
  int HX_IN_CONCRETE = 2;
  /** Lexical state. */
  int HX_IN_NESTED_CONCRETE = 3;
  /** Lexical state. */
  int HX_NESTED_COMMENT = 4;
  /** Lexical state. */
  int HX_PP = 5;
  /** Lexical state. */
  int IN_PP_UNCONCRETE = 6;
  /** Lexical state. */
  int IN_PP_NESTED_UNCONCRETE = 7;
  /** Lexical state. */
  int HX_CC = 8;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\"INT\"",
    "\"ID\"",
    "\"STR\"",
    "\"Statements\"",
    "\"ArgumentSignature\"",
    "\"Rs\"",
    "\"Statement\"",
    "\"IfTail\"",
    "\"Arg\"",
    "\"Op\"",
    "\"Type\"",
    "\"Identifier\"",
    "\"Mem\"",
    "\"Reg\"",
    "\"String\"",
    "\"Program\"",
    "\"ExpressionListTail\"",
    "\"Instruction\"",
    "\"Integer\"",
    "\"Sign\"",
    "\"Declarations\"",
    "\"Expression\"",
    "\"Instructions\"",
    "\"TypeListTail\"",
    "\"Constant\"",
    "\"TypeList\"",
    "\"Integers\"",
    "\"Regs\"",
    "\"Declaration\"",
    "\"ExpressionList\"",
    "\"TypeIdentifierTail\"",
    "\"Label\"",
    "\"Computed\"",
    "\"After1\"",
    "\"FT\"",
    "\"Local\"",
    "\"NoRs\"",
    "\"MoRs\"",
    "\"AppendRs\"",
    "\"XRegs\"",
    "\"XRegs1\"",
    "\"XRegs2\"",
    "\"FrameAccess\"",
    "\"FrameAccess1\"",
    "\"FrameAccess2\"",
    "\"AddConstant\"",
    "\"AddConstant1\"",
    "\"AddConstant2\"",
    "\"Compile\"",
    "\"P2\"",
    "\"P2Load\"",
    "\"P\"",
    "\"Ds\"",
    "\"F\"",
    "\"AS\"",
    "\"AS2\"",
    "\"S\"",
    "\"Immediate\"",
    "\"Reference\"",
    "\"Incr\"",
    "\"Data1\"",
    "\"Join1\"",
    "\"P1\"",
    "\"P1Ds\"",
    "\"D\"",
    "\"NoFT\"",
    "\"MoFT\"",
    "\"AppendFT\"",
    "\"RegLocal\"",
    "\"FrameLocal\"",
    "\"__HACS__\"",
    "\"\\u27e6\"",
    "\"\\u27e6\"",
    "\"\\u27e6\"",
    "\"\\u27e7\"",
    "\"\\u27e7\"",
    "<token of kind 77>",
    "\"/*\"",
    "\"/*\"",
    "\"*/\"",
    "<token of kind 81>",
    "\"\\u27e8\"",
    "\"\\u27e8\"",
    "\"\\u27e8\"",
    "\"\\u27e9\"",
    "\"\\u27e9\"",
    "<token of kind 87>",
    "<token of kind 88>",
    "\";\"",
    "\"|\"",
    "\"(\"",
    "\")\"",
    "\"*\"",
    "\"+\"",
    "\"?\"",
    "\"_\"",
    "\".\"",
    "\":\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\",\"",
    "\"\\u2200\"",
    "\"\\u2192\"",
    "\"\\u2191\"",
    "\"\\u2193\"",
    "\"\\u00ac\"",
    "\"@\"",
    "<T_HX_DOTTEDNAME>",
    "\"as\"",
    "\"attribute\"",
    "\"automatic\"",
    "\"binds\"",
    "\"compose\"",
    "\"data\"",
    "\"default\"",
    "\"free\"",
    "\"fresh\"",
    "\"global\"",
    "\"import\"",
    "\"main\"",
    "\"module\"",
    "\"priority\"",
    "\"rule\"",
    "\"scheme\"",
    "\"sort\"",
    "\"static\"",
    "\"sugar\"",
    "\"symbol\"",
    "\"tag\"",
    "\"space\"",
    "\"token\"",
    "\"fragment\"",
    "\"nested\"",
    "<T_HX_FRAGMENT_REF>",
    "<T_HX_RE_NAME>",
    "<T_HX_RE_WORD>",
    "<T_HX_META>",
    "<T_HX_VAR>",
    "<T_HX_NATURAL>",
    "<T_HX_INTEGER>",
    "<T_HX_UNNATURAL>",
    "<T_HX_STRING>",
    "<T_HX_STRING1CHAR>",
    "<T_HX_STRING2CHAR>",
    "<T_HX_ESCAPEDCHAR>",
    "<T_HX_HEX>",
    "<T_HX_CHAR_CLASS>",
    "\"^\"",
    "\"]\"",
    "\"-\"",
    "<T_HX_CC_OTHER>",
    "\"\\u0001\"",
    "<T_HX_PP_CONCRETE_SPACE>",
    "<T_HX_PP_CONCRETE_WORD>",
  };

}
