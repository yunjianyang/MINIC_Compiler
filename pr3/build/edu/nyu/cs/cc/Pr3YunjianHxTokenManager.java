/* Pr3YunjianHxTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. Pr3YunjianHxTokenManager.java */
package edu.nyu.cs.cc;

/** Token Manager. */
@SuppressWarnings("unused")public class Pr3YunjianHxTokenManager implements Pr3YunjianHxConstants {
                    int nesting ; int nestedState;

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_5(int pos, long active0, long active1){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_5(int pos, long active0, long active1){
   return jjMoveNfa_5(jjStopStringLiteralDfa_5(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_5(){
   switch(curChar)
   {
      case 10216:
         return jjStopAtPos(0, 84);
      default :
         return jjMoveNfa_5(2, 0);
   }
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0x40000000000000L, 0x0L
};
static final long[] jjbitVec1 = {
   0xffffff7ffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec3 = {
   0x0L, 0x0L, 0xffbfffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec4 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffc3fffffffffL
};
private int jjMoveNfa_5(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 2;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if ((0xfffffffeffffd9ffL & l) != 0L)
                  {
                     if (kind > 158)
                        kind = 158;
                     { jjCheckNAdd(1); }
                  }
                  else if ((0x100002600L & l) != 0L)
                  {
                     if (kind > 157)
                        kind = 157;
                     { jjCheckNAdd(0); }
                  }
                  break;
               case 0:
                  if ((0x100002600L & l) == 0L)
                     break;
                  kind = 157;
                  { jjCheckNAdd(0); }
                  break;
               case 1:
                  if ((0xfffffffeffffd9ffL & l) == 0L)
                     break;
                  kind = 158;
                  { jjCheckNAdd(1); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
               case 1:
                  kind = 158;
                  { jjCheckNAdd(1); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 157)
                        kind = 157;
                     { jjCheckNAdd(0); }
                  }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 158)
                        kind = 158;
                     { jjCheckNAdd(1); }
                  }
                  break;
               case 0:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 157)
                     kind = 157;
                  { jjCheckNAdd(0); }
                  break;
               case 1:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 158)
                     kind = 158;
                  { jjCheckNAdd(1); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 2 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_7(){
   switch(curChar)
   {
      case 10216:
         return jjStopAtPos(0, 86);
      case 10217:
         return jjStopAtPos(0, 87);
      default :
         return 1;
   }
}
private final int jjStopStringLiteralDfa_8(int pos, long active0, long active1, long active2){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_8(int pos, long active0, long active1, long active2){
   return jjMoveNfa_8(jjStopStringLiteralDfa_8(pos, active0, active1, active2), pos + 1);
}
private int jjMoveStringLiteralDfa0_8(){
   switch(curChar)
   {
      case 1:
         return jjStopAtPos(0, 156);
      case 45:
         return jjStopAtPos(0, 154);
      case 93:
         return jjStopAtPos(0, 153);
      case 94:
         return jjStopAtPos(0, 152);
      default :
         return jjMoveNfa_8(0, 0);
   }
}
static final long[] jjbitVec5 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec6 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_8(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 13;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xffffdffffffffbfdL & l) != 0L && kind > 155)
                     kind = 155;
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(4); }
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) != 0L && kind > 155)
                     kind = 155;
                  break;
               case 6:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 155)
                     kind = 155;
                  { jjCheckNAddStates(0, 2); }
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 155)
                     kind = 155;
                  { jjCheckNAdd(4); }
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 155)
                     kind = 155;
                  { jjCheckNAddTwoStates(4, 7); }
                  break;
               case 9:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 10:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 155)
                     kind = 155;
                  jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 11:
                  if ((0xff000000000000L & l) != 0L && kind > 155)
                     kind = 155;
                  break;
               case 12:
                  if ((0xfc00ffffffffffffL & l) != 0L && kind > 155)
                     kind = 155;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xffffffff8fffffffL & l) != 0L)
                  {
                     if (kind > 155)
                        kind = 155;
                  }
                  else if (curChar == 92)
                     { jjAddStates(3, 7); }
                  break;
               case 1:
                  if (curChar == 92)
                     { jjAddStates(3, 7); }
                  break;
               case 2:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 3:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAdd(4); }
                  break;
               case 4:
                  if ((0x7e0000007eL & l) != 0L && kind > 155)
                     kind = 155;
                  break;
               case 5:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 6:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 155)
                     kind = 155;
                  { jjCheckNAddStates(0, 2); }
                  break;
               case 7:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 155)
                     kind = 155;
                  { jjCheckNAdd(4); }
                  break;
               case 8:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 155)
                     kind = 155;
                  { jjCheckNAddTwoStates(4, 7); }
                  break;
               case 12:
                  if ((0xfedfffffffffffffL & l) != 0L && kind > 155)
                     kind = 155;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 12:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 155)
                     kind = 155;
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 13 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_2(){
   switch(curChar)
   {
      case 10214:
         return jjStopAtPos(0, 75);
      case 10215:
         return jjStopAtPos(0, 78);
      default :
         return 1;
   }
}
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2){
   switch (pos)
   {
      case 0:
         if ((active1 & 0xfffe000000000000L) != 0L || (active2 & 0x1ffL) != 0L)
         {
            jjmatchedKind = 142;
            return 70;
         }
         if ((active1 & 0x10000L) != 0L)
            return 1;
         if ((active1 & 0x100000000L) != 0L)
            return 71;
         if ((active1 & 0x800000000L) != 0L)
            return 7;
         return -1;
      case 1:
         if ((active1 & 0xfffc000000000000L) != 0L || (active2 & 0x1ffL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 142;
               jjmatchedPos = 1;
            }
            return 70;
         }
         if ((active1 & 0x2000000000000L) != 0L)
            return 70;
         return -1;
      case 2:
         if ((active1 & 0xfffc000000000000L) != 0L || (active2 & 0x1dfL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 142;
               jjmatchedPos = 2;
            }
            return 70;
         }
         if ((active2 & 0x20L) != 0L)
            return 70;
         return -1;
      case 3:
         if ((active1 & 0x6ebc000000000000L) != 0L || (active2 & 0x1ddL) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 142;
               jjmatchedPos = 3;
            }
            return 70;
         }
         if ((active1 & 0x9140000000000000L) != 0L || (active2 & 0x2L) != 0L)
            return 70;
         return -1;
      case 4:
         if ((active1 & 0x6cac000000000000L) != 0L || (active2 & 0x115L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 142;
               jjmatchedPos = 4;
            }
            return 70;
         }
         if ((active1 & 0x210000000000000L) != 0L || (active2 & 0xc8L) != 0L)
            return 70;
         return -1;
      case 5:
         if ((active1 & 0x40ac000000000000L) != 0L || (active2 & 0x100L) != 0L)
         {
            jjmatchedKind = 142;
            jjmatchedPos = 5;
            return 70;
         }
         if ((active1 & 0x2c00000000000000L) != 0L || (active2 & 0x15L) != 0L)
            return 70;
         return -1;
      case 6:
         if ((active1 & 0x400c000000000000L) != 0L || (active2 & 0x100L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 142;
               jjmatchedPos = 6;
            }
            return 70;
         }
         if ((active1 & 0xa0000000000000L) != 0L)
            return 70;
         return -1;
      case 7:
         if ((active1 & 0xc000000000000L) != 0L)
         {
            if (jjmatchedPos != 7)
            {
               jjmatchedKind = 142;
               jjmatchedPos = 7;
            }
            return 70;
         }
         if ((active1 & 0x4000000000000000L) != 0L || (active2 & 0x100L) != 0L)
            return 70;
         return -1;
      case 8:
         if ((active1 & 0xc000000000000L) != 0L)
            return 70;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 40:
         return jjStopAtPos(0, 93);
      case 41:
         return jjStopAtPos(0, 94);
      case 42:
         return jjStopAtPos(0, 95);
      case 43:
         return jjStartNfaWithStates_0(0, 96, 71);
      case 44:
         return jjStopAtPos(0, 105);
      case 46:
         return jjStartNfaWithStates_0(0, 99, 7);
      case 47:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000L, 0x0L);
      case 58:
         return jjStopAtPos(0, 100);
      case 59:
         return jjStopAtPos(0, 91);
      case 63:
         return jjStopAtPos(0, 97);
      case 64:
         return jjStopAtPos(0, 111);
      case 65:
         return jjMoveStringLiteralDfa1_0(0x7180000c00800L, 0x104L, 0x0L);
      case 67:
         return jjMoveStringLiteralDfa1_0(0x2010002000L, 0x0L, 0x0L);
      case 68:
         jjmatchedKind = 59;
         return jjMoveStringLiteralDfa1_0(0x1080020000010100L, 0x0L, 0x0L);
      case 69:
         jjmatchedKind = 47;
         return jjMoveStringLiteralDfa1_0(0x800060000L, 0x0L, 0x0L);
      case 70:
         jjmatchedKind = 42;
         return jjMoveStringLiteralDfa1_0(0xe040000100000000L, 0x0L, 0x0L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x80000400042baL, 0x0L, 0x0L);
      case 74:
         return jjMoveStringLiteralDfa1_0(0x100000000000000L, 0x0L, 0x0L);
      case 76:
         return jjMoveStringLiteralDfa1_0(0x80400L, 0x0L, 0x0L);
      case 77:
         return jjMoveStringLiteralDfa1_0(0x20000000L, 0x82L, 0x0L);
      case 78:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x41L, 0x0L);
      case 79:
         return jjMoveStringLiteralDfa1_0(0x400000000L, 0x0L, 0x0L);
      case 80:
         jjmatchedKind = 40;
         return jjMoveStringLiteralDfa1_0(0x60000c001000000L, 0x0L, 0x0L);
      case 82:
         return jjMoveStringLiteralDfa1_0(0x30000082008000L, 0x0L, 0x0L);
      case 83:
         jjmatchedKind = 45;
         return jjMoveStringLiteralDfa1_0(0x40020c200004L, 0x0L, 0x0L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x1000101040L, 0x0L, 0x0L);
      case 88:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x38L, 0x0L);
      case 91:
         return jjStopAtPos(0, 103);
      case 93:
         return jjStopAtPos(0, 104);
      case 95:
         jjmatchedKind = 98;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200L, 0x0L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xe000000000000L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000000000000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20000000000000L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xc0000000000000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x300000000000000L, 0x100L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400000000000000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800000000000000L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3000000000000000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000000000000000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000000000000000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x5fL);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0xa0L);
      case 123:
         return jjStopAtPos(0, 101);
      case 124:
         return jjStopAtPos(0, 92);
      case 125:
         return jjStopAtPos(0, 102);
      case 172:
         return jjStopAtPos(0, 110);
      case 8593:
         return jjStopAtPos(0, 108);
      case 8594:
         return jjStopAtPos(0, 107);
      case 8595:
         return jjStopAtPos(0, 109);
      case 8704:
         return jjStopAtPos(0, 106);
      case 10214:
         return jjStopAtPos(0, 74);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active1 & 0x10000L) != 0L)
            return jjStopAtPos(1, 80);
         break;
      case 49:
         if ((active0 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000000L, active1, 0L, active2, 0L);
      case 50:
         if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000L, active1, 0L, active2, 0L);
      case 68:
         if ((active0 & 0x8L) != 0L)
            return jjStopAtPos(1, 3);
         break;
      case 78:
         return jjMoveStringLiteralDfa2_0(active0, 0x2L, active1, 0L, active2, 0L);
      case 82:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x38L, active2, 0L);
      case 83:
         if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000000L, active1, 0L, active2, 0L);
      case 84:
         if ((active0 & 0x100000000L) != 0L)
            return jjStopAtPos(1, 32);
         return jjMoveStringLiteralDfa2_0(active0, 0x4L, active1, 0L, active2, 0L);
      case 95:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x200L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000000400L, active1, 0x1040000000000000L, active2, 0x20L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x1L);
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0x7000000004000L, active1, 0L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x30000022018100L, active1, 0x80000000000000L, active2, 0L);
      case 102:
         return jjMoveStringLiteralDfa2_0(active0, 0x400080L, active1, 0L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x400008000000L, active1, 0x10000000000000L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x400000000000000L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000L, active1, 0x800000000000000L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000230L, active1, 0L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x100002010082000L, active1, 0x20200000000000c3L, active2, 0x82L);
      case 112:
         if ((active0 & 0x400000000L) != 0L)
            return jjStopAtPos(1, 34);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x104L, active2, 0x40L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0xe040000001800800L, active1, 0x4300000000000000L, active2, 0x100L);
      case 115:
         if ((active0 & 0x80000000L) != 0L)
            return jjStopAtPos(1, 31);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStopAtPos(1, 41);
         else if ((active1 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 113, 70);
         break;
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x204200000L, active1, 0x4000000000000L, active2, 0x4L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000000000L, active1, 0x8008000000000000L, active2, 0x8L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x800060000L, active1, 0L, active2, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000101040L, active1, 0L, active2, 0x10L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2);
      return 2;
   }
   switch(curChar)
   {
      case 50:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStopAtPos(2, 44);
         break;
      case 68:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000000L, active1, 0L, active2, 0L);
      case 70:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0xc0L, active2, 0L);
      case 72:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x200L, active2, 0L);
      case 76:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000L, active1, 0L, active2, 0L);
      case 82:
         if ((active0 & 0x4L) != 0L)
            return jjStopAtPos(2, 2);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x3L, active2, 0L);
      case 84:
         if ((active0 & 0x2L) != 0L)
            return jjStopAtPos(2, 1);
         return jjMoveStringLiteralDfa3_0(active0, 0x80L, active1, 0L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0xe040000004200000L, active1, 0L, active2, 0x144L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x400L, active1, 0L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x90100L, active1, 0L, active2, 0L);
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0x7000000000000L, active1, 0x2000000000000000L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000L, active1, 0x300000000000038L, active2, 0L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000000L, active1, 0x80000000000000L, active2, 0L);
      case 103:
         if ((active0 & 0x800L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 15;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(2, 133, 70);
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000a800000L, active1, 0L, active2, 0x8L);
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x1L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000000000L, active1, 0x5000000000000000L, active2, 0L);
      case 107:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x80L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8000000000000000L, active2, 0L);
      case 109:
         if ((active0 & 0x20000000L) != 0L)
            return jjStopAtPos(2, 29);
         return jjMoveStringLiteralDfa3_0(active0, 0x1008002010000000L, active1, 0x20000000000000L, active2, 0x10L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000002000L, active1, 0x10000000000000L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000L, active1, 0x400000000000000L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x1800161040L, active1, 0x800000000000104L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000L, active1, 0L, active2, 0x2L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x30L, active1, 0L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000040400200L, active1, 0x4c000000000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2);
      return 3;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x200L, active2, 0L);
      case 67:
         return jjMoveStringLiteralDfa4_0(active0, 0x7000000000000L, active1, 0L, active2, 0L);
      case 76:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000000L, active1, 0L, active2, 0L);
      case 84:
         if ((active1 & 0x40L) != 0L)
            return jjStopAtPos(3, 70);
         else if ((active1 & 0x80L) != 0L)
            return jjStopAtPos(3, 71);
         break;
      case 97:
         if ((active1 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 118, 70);
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000080080L, active1, 0x80000000000000L, active2, 0x8L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x400000000000000L, active2, 0x10L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x40L);
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x10000000000000L, active2, 0L);
      case 101:
         if ((active0 & 0x40L) != 0L)
         {
            jjmatchedKind = 6;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 120, 70);
         else if ((active1 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 127, 70);
         return jjMoveStringLiteralDfa4_0(active0, 0x18001040501600L, active1, 0x104L, active2, 0x81L);
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0x400001000000L, active1, 0x38L, active2, 0x100L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000L, active1, 0L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x10100L, active1, 0L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0xf040000000000000L, active1, 0L, active2, 0L);
      case 110:
         if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(3, 27);
         else if ((active1 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 124, 70);
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000004000L, active1, 0L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000L, active1, 0x4808000000000000L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x2010000000L, active1, 0x20000000000000L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x800060000L, active1, 0x4000000000000L, active2, 0L);
      case 115:
         if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(3, 25);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStopAtPos(3, 58);
         else if ((active1 & 0x1L) != 0L)
            return jjStopAtPos(3, 64);
         else if ((active1 & 0x2L) != 0L)
            return jjStopAtPos(3, 65);
         return jjMoveStringLiteralDfa4_0(active0, 0x2000L, active1, 0x200000000000000L, active2, 0L);
      case 116:
         if ((active2 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(3, 129, 70);
         return jjMoveStringLiteralDfa4_0(active0, 0x4200030L, active1, 0L, active2, 0x4L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000L, active1, 0x2000000000000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, active2);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(2, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, active2);
      return 4;
   }
   switch(curChar)
   {
      case 49:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStopAtPos(4, 55);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStopAtPos(4, 56);
         break;
      case 67:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x200L, active2, 0L);
      case 73:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000L, active1, 0L, active2, 0L);
      case 76:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000001000L, active1, 0L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000010100L, active1, 0x400000000000000L, active2, 0L);
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000000L, active1, 0L, active2, 0L);
      case 101:
         if ((active2 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(4, 134, 70);
         return jjMoveStringLiteralDfa5_0(active0, 0xe040000804260000L, active1, 0L, active2, 0L);
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000200L, active1, 0L, active2, 0L);
      case 104:
         if ((active1 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 121, 70);
         break;
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000080L, active1, 0x4000000000000L, active2, 0x4L);
      case 108:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(4, 10);
         else if ((active0 & 0x80000L) != 0L)
            return jjStopAtPos(4, 19);
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000000L, active1, 0x2000000000000000L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000L, active1, 0x8000000000000L, active2, 0x101L);
      case 110:
         if ((active2 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(4, 135, 70);
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000L, active1, 0x104L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x27000000000000L, active1, 0x20000000000000L, active2, 0x10L);
      case 114:
         if ((active2 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(4, 131, 70);
         return jjMoveStringLiteralDfa5_0(active0, 0x10000001400030L, active1, 0x4800000000000000L, active2, 0L);
      case 115:
         if ((active1 & 0x8L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 116, 70);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x30L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x6000L, active1, 0L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000L, active1, 0x80000000000000L, active2, 0L);
      case 121:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(4, 60);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, active2);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(3, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, active2);
      return 5;
   }
   switch(curChar)
   {
      case 49:
         if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(5, 22);
         else if ((active1 & 0x10L) != 0L)
            return jjStopAtPos(5, 68);
         break;
      case 50:
         if ((active1 & 0x20L) != 0L)
            return jjStopAtPos(5, 69);
         break;
      case 65:
         return jjMoveStringLiteralDfa6_0(active0, 0xe000000000000000L, active1, 0L, active2, 0L);
      case 76:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000000000L, active1, 0L, active2, 0L);
      case 83:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x200L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x1002000L, active1, 0x8000000000000L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x4000000000000L, active2, 0L);
      case 99:
         if ((active2 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(5, 130, 70);
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000000000L, active1, 0L, active2, 0L);
      case 100:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStopAtPos(5, 39);
         return jjMoveStringLiteralDfa6_0(active0, 0x100000L, active1, 0x104L, active2, 0L);
      case 101:
         if ((active1 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 125, 70);
         else if ((active2 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(5, 128, 70);
         return jjMoveStringLiteralDfa6_0(active0, 0x10400040800200L, active1, 0L, active2, 0x100L);
      case 103:
         if ((active0 & 0x200000000L) != 0L)
            return jjStopAtPos(5, 33);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x8001000005000L, active1, 0x4000000000000000L, active2, 0L);
      case 108:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(5, 7);
         else if ((active1 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 122, 70);
         else if ((active2 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(5, 132, 70);
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000L, active1, 0x80000000000000L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x4200000L, active1, 0L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x7000000000000L, active1, 0L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x10100L, active1, 0L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa6_0(active0, 0x800060000L, active1, 0x20000000000000L, active2, 0L);
      case 116:
         if ((active1 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 123, 70);
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000L, active1, 0L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0x30L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, active2);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(4, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, active2);
      return 6;
   }
   switch(curChar)
   {
      case 70:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x100L, active2, 0L);
      case 82:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x4L, active2, 0L);
      case 83:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStopAtPos(6, 46);
         break;
      case 95:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x200L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x28000000010100L, active1, 0L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0xe000000000000030L, active1, 0L, active2, 0L);
      case 101:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStopAtPos(6, 37);
         else if ((active1 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 117, 70);
         return jjMoveStringLiteralDfa7_0(active0, 0x14300000L, active1, 0L, active2, 0L);
      case 102:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000L, active1, 0L, active2, 0L);
      case 109:
         if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(6, 24);
         break;
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000802000L, active1, 0L, active2, 0x100L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000000000L, active1, 0L, active2, 0L);
      case 114:
         if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x200L, active1, 0L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa7_0(active0, 0x7001800061000L, active1, 0L, active2, 0L);
      case 116:
         if ((active1 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 119, 70);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x4008000000000000L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x4000000000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, active2);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(5, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, active2);
      return 7;
   }
   switch(curChar)
   {
      case 84:
         if ((active1 & 0x100L) != 0L)
            return jjStopAtPos(7, 72);
         break;
      case 95:
         if ((active1 & 0x200L) != 0L)
            return jjStopAtPos(7, 73);
         break;
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0xe050000000000000L, active1, 0L, active2, 0L);
      case 100:
         if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(7, 28);
         break;
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x800064000L, active1, 0x8000000000000L, active2, 0L);
      case 108:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStopAtPos(7, 53);
         break;
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x4300000L, active1, 0L, active2, 0L);
      case 115:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(7, 9);
         else if ((active1 & 0x4L) != 0L)
            return jjStopAtPos(7, 66);
         break;
      case 116:
         if ((active0 & 0x1000L) != 0L)
         {
            jjmatchedKind = 12;
            jjmatchedPos = 7;
         }
         else if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(7, 13);
         else if ((active2 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(7, 136, 70);
         return jjMoveStringLiteralDfa8_0(active0, 0xf001000810130L, active1, 0x4000000000000L, active2, 0L);
      case 121:
         if ((active1 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 126, 70);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, active2);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(6, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 83:
         return jjMoveStringLiteralDfa9_0(active0, 0x800000L, active1, 0L);
      case 84:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x47000000000000L, active1, 0L);
      case 99:
         if ((active1 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 115, 70);
         break;
      case 101:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStopAtPos(8, 51);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStopAtPos(8, 52);
         else if ((active1 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 114, 70);
         return jjMoveStringLiteralDfa9_0(active0, 0xe000000000004000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x10130L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x800060000L, active1, 0L);
      case 116:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 26;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0x300000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0x1000000000L);
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0x900000L);
      case 108:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStopAtPos(9, 54);
         break;
      case 110:
         if ((active0 & 0x20000L) != 0L)
         {
            jjmatchedKind = 17;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0x7000800040000L);
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x10130L);
      case 114:
         if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(9, 14);
         break;
      case 115:
         if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(9, 21);
         return jjMoveStringLiteralDfa10_0(active0, 0xe000000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 76:
         return jjMoveStringLiteralDfa11_0(active0, 0x800040000L);
      case 102:
         return jjMoveStringLiteralDfa11_0(active0, 0x100000L);
      case 103:
         return jjMoveStringLiteralDfa11_0(active0, 0x800000L);
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x1000000000L);
      case 110:
         if ((active0 & 0x20L) != 0L)
         {
            jjmatchedKind = 5;
            jjmatchedPos = 10;
         }
         else if ((active0 & 0x10000L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 10;
         }
         return jjMoveStringLiteralDfa11_0(active0, 0x110L);
      case 115:
         if ((active0 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 10;
         }
         return jjMoveStringLiteralDfa11_0(active0, 0xc000000000000000L);
      case 116:
         if ((active0 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 10;
         }
         return jjMoveStringLiteralDfa11_0(active0, 0x6000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 49:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStopAtPos(11, 49);
         else if ((active0 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(11, 62);
         break;
      case 50:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStopAtPos(11, 50);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(11, 63);
         break;
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0x800140000L);
      case 108:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(11, 36);
         break;
      case 110:
         return jjMoveStringLiteralDfa12_0(active0, 0x800000L);
      case 115:
         if ((active0 & 0x10L) != 0L)
            return jjStopAtPos(11, 4);
         else if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(11, 8);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, 0L, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa13_0(active0, 0x800000L);
      case 101:
         return jjMoveStringLiteralDfa13_0(active0, 0x100000L);
      case 115:
         return jjMoveStringLiteralDfa13_0(active0, 0x800040000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, 0L, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 114:
         return jjMoveStringLiteralDfa14_0(active0, 0x100000L);
      case 116:
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 18;
            jjmatchedPos = 13;
         }
         return jjMoveStringLiteralDfa14_0(active0, 0x800800000L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa14_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, 0L, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 84:
         return jjMoveStringLiteralDfa15_0(active0, 0x800100000L);
      case 117:
         return jjMoveStringLiteralDfa15_0(active0, 0x800000L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa15_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(13, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, 0L, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa16_0(active0, 0x800100000L);
      case 114:
         return jjMoveStringLiteralDfa16_0(active0, 0x800000L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa16_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(14, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0, 0L, 0L);
      return 16;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(16, 23);
         break;
      case 105:
         return jjMoveStringLiteralDfa17_0(active0, 0x800100000L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa17_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(15, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0, 0L, 0L);
      return 17;
   }
   switch(curChar)
   {
      case 108:
         if ((active0 & 0x100000L) != 0L)
            return jjStopAtPos(17, 20);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStopAtPos(17, 35);
         break;
      default :
         break;
   }
   return jjStartNfa_0(16, active0, 0L, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 70;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 71:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(57, 58); }
                  else if ((0x280000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(56, 57); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(55, 6); }
                  else if ((0x280000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(54, 55); }
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 143)
                        kind = 143;
                     { jjCheckNAddStates(8, 12); }
                  }
                  else if ((0x100002602L & l) != 0L)
                  {
                     if (kind > 90)
                        kind = 90;
                  }
                  else if ((0x280000000000L & l) != 0L)
                     { jjCheckNAddStates(13, 16); }
                  else if (curChar == 34)
                     { jjCheckNAddStates(17, 19); }
                  else if (curChar == 39)
                     { jjCheckNAddStates(20, 22); }
                  else if (curChar == 46)
                     { jjCheckNAdd(7); }
                  else if (curChar == 35)
                  {
                     if (kind > 141)
                        kind = 141;
                     { jjCheckNAdd(5); }
                  }
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 70:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 142)
                        kind = 142;
                     { jjCheckNAdd(67); }
                  }
                  else if (curChar == 46)
                     { jjAddStates(23, 24); }
                  if ((0x3ff001000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(62, 63); }
                  break;
               case 1:
                  if (curChar != 47)
                     break;
                  if (kind > 90)
                     kind = 90;
                  { jjCheckNAdd(2); }
                  break;
               case 2:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 90)
                     kind = 90;
                  { jjCheckNAdd(2); }
                  break;
               case 3:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 4:
                  if (curChar != 35)
                     break;
                  if (kind > 141)
                     kind = 141;
                  { jjCheckNAdd(5); }
                  break;
               case 5:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 141)
                     kind = 141;
                  { jjCheckNAdd(5); }
                  break;
               case 6:
                  if (curChar == 46)
                     { jjCheckNAdd(7); }
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 145)
                     kind = 145;
                  { jjCheckNAddTwoStates(7, 8); }
                  break;
               case 9:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(9, 10); }
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 145)
                     kind = 145;
                  { jjCheckNAdd(10); }
                  break;
               case 11:
                  if (curChar == 39)
                     { jjCheckNAddStates(20, 22); }
                  break;
               case 12:
                  if ((0xffffff7ffffffbffL & l) != 0L)
                     { jjCheckNAddStates(20, 22); }
                  break;
               case 13:
                  if (curChar == 39 && kind > 146)
                     kind = 146;
                  break;
               case 16:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(17); }
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(20, 22); }
                  break;
               case 19:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(25, 30); }
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(31, 34); }
                  break;
               case 21:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(35, 39); }
                  break;
               case 22:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 23:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(40, 43); }
                  break;
               case 24:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(20, 22); }
                  break;
               case 25:
                  if ((0xfc00ffffffffffffL & l) != 0L)
                     { jjCheckNAddStates(20, 22); }
                  break;
               case 26:
                  if (curChar == 34)
                     { jjCheckNAddStates(17, 19); }
                  break;
               case 27:
                  if ((0xfffffffbfffffbffL & l) != 0L)
                     { jjCheckNAddStates(17, 19); }
                  break;
               case 28:
                  if (curChar == 34 && kind > 146)
                     kind = 146;
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(32); }
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(17, 19); }
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(44, 49); }
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(50, 53); }
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(54, 58); }
                  break;
               case 37:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 38:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(59, 62); }
                  break;
               case 39:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(17, 19); }
                  break;
               case 40:
                  if ((0xfc00ffffffffffffL & l) != 0L)
                     { jjCheckNAddStates(17, 19); }
                  break;
               case 42:
                  if ((0xfc00ffffffffffffL & l) != 0L && kind > 149)
                     kind = 149;
                  break;
               case 43:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 44:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 149)
                     kind = 149;
                  jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 45:
                  if ((0xff000000000000L & l) != 0L && kind > 149)
                     kind = 149;
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 149)
                     kind = 149;
                  { jjCheckNAddStates(63, 65); }
                  break;
               case 48:
                  if ((0x3ff000000000000L & l) != 0L && kind > 149)
                     kind = 149;
                  break;
               case 49:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 149)
                     kind = 149;
                  { jjCheckNAdd(48); }
                  break;
               case 50:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 149)
                     kind = 149;
                  { jjCheckNAddTwoStates(48, 49); }
                  break;
               case 52:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(48); }
                  break;
               case 53:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAddStates(13, 16); }
                  break;
               case 54:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(54, 55); }
                  break;
               case 55:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(55, 6); }
                  break;
               case 56:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(56, 57); }
                  break;
               case 57:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(57, 58); }
                  break;
               case 59:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(59, 60); }
                  break;
               case 60:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 145)
                     kind = 145;
                  { jjCheckNAdd(60); }
                  break;
               case 62:
                  if ((0x3ff001000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(62, 63); }
                  break;
               case 63:
                  if (curChar == 46)
                     { jjAddStates(23, 24); }
                  break;
               case 66:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 112)
                     kind = 112;
                  jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 67:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 142)
                     kind = 142;
                  { jjCheckNAdd(67); }
                  break;
               case 68:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 143)
                     kind = 143;
                  { jjCheckNAddStates(8, 12); }
                  break;
               case 69:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 143)
                     kind = 143;
                  { jjCheckNAdd(69); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe00000000L & l) != 0L)
                  {
                     if (kind > 142)
                        kind = 142;
                     { jjCheckNAddStates(66, 68); }
                  }
                  else if (curChar == 92)
                     { jjAddStates(69, 73); }
                  break;
               case 70:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 142)
                        kind = 142;
                     { jjCheckNAdd(67); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(62, 63); }
                  break;
               case 2:
                  if (kind > 90)
                     kind = 90;
                  jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 5:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 141)
                     kind = 141;
                  jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 8:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(74, 75); }
                  break;
               case 12:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(20, 22); }
                  break;
               case 14:
                  if (curChar == 92)
                     { jjAddStates(76, 80); }
                  break;
               case 15:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 16:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAdd(17); }
                  break;
               case 17:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(20, 22); }
                  break;
               case 18:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 19:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(25, 30); }
                  break;
               case 20:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(31, 34); }
                  break;
               case 21:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(35, 39); }
                  break;
               case 25:
                  if ((0xfedfffffffffffffL & l) != 0L)
                     { jjCheckNAddStates(20, 22); }
                  break;
               case 27:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(17, 19); }
                  break;
               case 29:
                  if (curChar == 92)
                     { jjAddStates(81, 85); }
                  break;
               case 30:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 31:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAdd(32); }
                  break;
               case 32:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(17, 19); }
                  break;
               case 33:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 34:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(44, 49); }
                  break;
               case 35:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(50, 53); }
                  break;
               case 36:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(54, 58); }
                  break;
               case 40:
                  if ((0xfedfffffffffffffL & l) != 0L)
                     { jjCheckNAddStates(17, 19); }
                  break;
               case 41:
                  if (curChar == 92)
                     { jjAddStates(69, 73); }
                  break;
               case 42:
                  if ((0xfedfffffffffffffL & l) != 0L && kind > 149)
                     kind = 149;
                  break;
               case 46:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 47:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 149)
                     kind = 149;
                  { jjCheckNAddStates(63, 65); }
                  break;
               case 48:
                  if ((0x7e0000007eL & l) != 0L && kind > 149)
                     kind = 149;
                  break;
               case 49:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 149)
                     kind = 149;
                  { jjCheckNAdd(48); }
                  break;
               case 50:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 149)
                     kind = 149;
                  { jjCheckNAddTwoStates(48, 49); }
                  break;
               case 51:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 52:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAdd(48); }
                  break;
               case 58:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(86, 87); }
                  break;
               case 61:
                  if ((0x7fffffe00000000L & l) == 0L)
                     break;
                  if (kind > 142)
                     kind = 142;
                  { jjCheckNAddStates(66, 68); }
                  break;
               case 62:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(62, 63); }
                  break;
               case 64:
                  if ((0x7fffffe00000000L & l) != 0L)
                     { jjCheckNAddTwoStates(62, 63); }
                  break;
               case 65:
                  if ((0x7fffffeL & l) == 0L)
                     break;
                  if (kind > 112)
                     kind = 112;
                  { jjCheckNAdd(66); }
                  break;
               case 66:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 112)
                     kind = 112;
                  { jjCheckNAdd(66); }
                  break;
               case 67:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 142)
                     kind = 142;
                  { jjCheckNAdd(67); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 90)
                     kind = 90;
                  jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 12:
               case 25:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(20, 22); }
                  break;
               case 27:
               case 40:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(17, 19); }
                  break;
               case 42:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 149)
                     kind = 149;
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 70 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_4(){
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_4(0x40000L);
      case 47:
         return jjMoveStringLiteralDfa1_4(0x20000L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_4(long active1){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active1 & 0x20000L) != 0L)
            return jjStopAtPos(1, 81);
         break;
      case 47:
         if ((active1 & 0x40000L) != 0L)
            return jjStopAtPos(1, 82);
         break;
      default :
         return 2;
   }
   return 2;
}
private int jjMoveStringLiteralDfa0_3(){
   switch(curChar)
   {
      case 10214:
         return jjStopAtPos(0, 76);
      case 10215:
         return jjStopAtPos(0, 77);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa0_6(){
   switch(curChar)
   {
      case 10216:
         return jjStopAtPos(0, 85);
      case 10217:
         return jjStopAtPos(0, 88);
      default :
         return 1;
   }
}
private final int jjStopStringLiteralDfa_1(int pos, long active0, long active1, long active2){
   switch (pos)
   {
      case 0:
         if ((active1 & 0x410000000L) != 0L)
            return 10;
         if ((active1 & 0x10000L) != 0L)
         {
            jjmatchedKind = 140;
            return 1;
         }
         if ((active2 & 0x300L) != 0L)
         {
            jjmatchedKind = 140;
            return 10;
         }
         return -1;
      case 1:
         if ((active2 & 0x300L) != 0L)
         {
            jjmatchedKind = 140;
            jjmatchedPos = 1;
            return 10;
         }
         return -1;
      case 2:
         if ((active2 & 0x300L) != 0L)
         {
            jjmatchedKind = 140;
            jjmatchedPos = 2;
            return 10;
         }
         return -1;
      case 3:
         if ((active2 & 0x300L) != 0L)
         {
            jjmatchedKind = 140;
            jjmatchedPos = 3;
            return 10;
         }
         return -1;
      case 4:
         if ((active2 & 0x300L) != 0L)
         {
            jjmatchedKind = 140;
            jjmatchedPos = 4;
            return 10;
         }
         return -1;
      case 5:
         if ((active2 & 0x200L) != 0L)
            return 10;
         if ((active2 & 0x100L) != 0L)
         {
            jjmatchedKind = 140;
            jjmatchedPos = 5;
            return 10;
         }
         return -1;
      case 6:
         if ((active2 & 0x100L) != 0L)
         {
            jjmatchedKind = 140;
            jjmatchedPos = 6;
            return 10;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_1(int pos, long active0, long active1, long active2){
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0, active1, active2), pos + 1);
}
private int jjMoveStringLiteralDfa0_1(){
   switch(curChar)
   {
      case 40:
         return jjStopAtPos(0, 93);
      case 41:
         return jjStopAtPos(0, 94);
      case 42:
         return jjStopAtPos(0, 95);
      case 43:
         return jjStopAtPos(0, 96);
      case 46:
         return jjStopAtPos(0, 99);
      case 47:
         return jjMoveStringLiteralDfa1_1(0x10000L, 0x0L);
      case 58:
         return jjStopAtPos(0, 100);
      case 59:
         return jjStopAtPos(0, 91);
      case 63:
         return jjStopAtPos(0, 97);
      case 95:
         return jjStartNfaWithStates_1(0, 98, 10);
      case 102:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x100L);
      case 110:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x200L);
      case 124:
         return jjStartNfaWithStates_1(0, 92, 10);
      case 10214:
         return jjStopAtPos(0, 74);
      default :
         return jjMoveNfa_1(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_1(long active1, long active2){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(0, 0L, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active1 & 0x10000L) != 0L)
            return jjStopAtPos(1, 80);
         break;
      case 101:
         return jjMoveStringLiteralDfa2_1(active1, 0L, active2, 0x200L);
      case 114:
         return jjMoveStringLiteralDfa2_1(active1, 0L, active2, 0x100L);
      default :
         break;
   }
   return jjStartNfa_1(0, 0L, active1, active2);
}
private int jjMoveStringLiteralDfa2_1(long old1, long active1, long old2, long active2){
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_1(0, 0L, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(1, 0L, 0L, active2);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_1(active2, 0x100L);
      case 115:
         return jjMoveStringLiteralDfa3_1(active2, 0x200L);
      default :
         break;
   }
   return jjStartNfa_1(1, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa3_1(long old2, long active2){
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_1(1, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(2, 0L, 0L, active2);
      return 3;
   }
   switch(curChar)
   {
      case 103:
         return jjMoveStringLiteralDfa4_1(active2, 0x100L);
      case 116:
         return jjMoveStringLiteralDfa4_1(active2, 0x200L);
      default :
         break;
   }
   return jjStartNfa_1(2, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa4_1(long old2, long active2){
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_1(2, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(3, 0L, 0L, active2);
      return 4;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa5_1(active2, 0x200L);
      case 109:
         return jjMoveStringLiteralDfa5_1(active2, 0x100L);
      default :
         break;
   }
   return jjStartNfa_1(3, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa5_1(long old2, long active2){
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_1(3, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(4, 0L, 0L, active2);
      return 5;
   }
   switch(curChar)
   {
      case 100:
         if ((active2 & 0x200L) != 0L)
            return jjStartNfaWithStates_1(5, 137, 10);
         break;
      case 101:
         return jjMoveStringLiteralDfa6_1(active2, 0x100L);
      default :
         break;
   }
   return jjStartNfa_1(4, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa6_1(long old2, long active2){
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_1(4, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(5, 0L, 0L, active2);
      return 6;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa7_1(active2, 0x100L);
      default :
         break;
   }
   return jjStartNfa_1(5, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa7_1(long old2, long active2){
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_1(5, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(6, 0L, 0L, active2);
      return 7;
   }
   switch(curChar)
   {
      case 116:
         if ((active2 & 0x100L) != 0L)
            return jjStartNfaWithStates_1(7, 136, 10);
         break;
      default :
         break;
   }
   return jjStartNfa_1(6, 0L, 0L, active2);
}
private int jjStartNfaWithStates_1(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_1(state, pos + 1);
}
static final long[] jjbitVec7 = {
   0x0L, 0x0L, 0x0L, 0x10000000000L
};
static final long[] jjbitVec8 = {
   0x0L, 0x0L, 0x0L, 0x20000000000L
};
static final long[] jjbitVec9 = {
   0x0L, 0x0L, 0xf7fff7ffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 70;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x73ffa07afffff9ffL & l) != 0L)
                  {
                     if (kind > 140)
                        kind = 140;
                     { jjCheckNAdd(10); }
                  }
                  else if (curChar == 34)
                     { jjCheckNAddStates(17, 19); }
                  else if (curChar == 39)
                     { jjCheckNAddStates(20, 22); }
                  if ((0x100002602L & l) != 0L)
                  {
                     if (kind > 90)
                        kind = 90;
                  }
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if ((0x73ffa07afffff9ffL & l) != 0L)
                  {
                     if (kind > 140)
                        kind = 140;
                     { jjCheckNAdd(10); }
                  }
                  if (curChar == 47)
                  {
                     if (kind > 90)
                        kind = 90;
                     { jjCheckNAdd(2); }
                  }
                  break;
               case 2:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 90)
                     kind = 90;
                  { jjCheckNAdd(2); }
                  break;
               case 3:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 6:
                  if ((0x3ff001000000000L & l) != 0L)
                     { jjAddStates(88, 89); }
                  break;
               case 9:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 139)
                     kind = 139;
                  jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 10:
                  if ((0x73ffa07afffff9ffL & l) == 0L)
                     break;
                  if (kind > 140)
                     kind = 140;
                  { jjCheckNAdd(10); }
                  break;
               case 11:
                  if (curChar == 39)
                     { jjCheckNAddStates(20, 22); }
                  break;
               case 12:
                  if ((0xffffff7ffffffbffL & l) != 0L)
                     { jjCheckNAddStates(20, 22); }
                  break;
               case 13:
                  if (curChar == 39 && kind > 146)
                     kind = 146;
                  break;
               case 16:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(17); }
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(20, 22); }
                  break;
               case 19:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(25, 30); }
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(31, 34); }
                  break;
               case 21:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(35, 39); }
                  break;
               case 22:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 23:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(40, 43); }
                  break;
               case 24:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(20, 22); }
                  break;
               case 25:
                  if ((0xfc00ffffffffffffL & l) != 0L)
                     { jjCheckNAddStates(20, 22); }
                  break;
               case 26:
                  if (curChar == 34)
                     { jjCheckNAddStates(17, 19); }
                  break;
               case 27:
                  if ((0xfffffffbfffffbffL & l) != 0L)
                     { jjCheckNAddStates(17, 19); }
                  break;
               case 28:
                  if (curChar == 34 && kind > 146)
                     kind = 146;
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(32); }
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(17, 19); }
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(44, 49); }
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(50, 53); }
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(54, 58); }
                  break;
               case 37:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 38:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(59, 62); }
                  break;
               case 39:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(17, 19); }
                  break;
               case 40:
                  if ((0xfc00ffffffffffffL & l) != 0L)
                     { jjCheckNAddStates(17, 19); }
                  break;
               case 43:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddStates(90, 92); }
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(48); }
                  break;
               case 48:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(90, 92); }
                  break;
               case 50:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(93, 98); }
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(99, 102); }
                  break;
               case 52:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(103, 107); }
                  break;
               case 53:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 54:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(108, 111); }
                  break;
               case 55:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(90, 92); }
                  break;
               case 56:
                  if ((0xfc00ffffffffffffL & l) != 0L)
                     { jjCheckNAddStates(90, 92); }
                  break;
               case 59:
                  if ((0xfc00ffffffffffffL & l) != 0L && kind > 149)
                     kind = 149;
                  break;
               case 60:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 61:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 149)
                     kind = 149;
                  jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 62:
                  if ((0xff000000000000L & l) != 0L && kind > 149)
                     kind = 149;
                  break;
               case 64:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 149)
                     kind = 149;
                  { jjCheckNAddStates(112, 114); }
                  break;
               case 65:
                  if ((0x3ff000000000000L & l) != 0L && kind > 149)
                     kind = 149;
                  break;
               case 66:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 149)
                     kind = 149;
                  { jjCheckNAdd(65); }
                  break;
               case 67:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 149)
                     kind = 149;
                  { jjCheckNAddTwoStates(65, 66); }
                  break;
               case 69:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(65); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xffffffffc7ffffffL & l) != 0L)
                  {
                     if (kind > 140)
                        kind = 140;
                     { jjCheckNAdd(10); }
                  }
                  else if (curChar == 92)
                     { jjAddStates(115, 119); }
                  else if (curChar == 91)
                     { jjCheckNAddStates(120, 123); }
                  if ((0x7fffffeL & l) != 0L)
                  {
                     if (kind > 139)
                        kind = 139;
                     { jjCheckNAdd(9); }
                  }
                  break;
               case 1:
               case 10:
                  if ((0xffffffffc7ffffffL & l) == 0L)
                     break;
                  if (kind > 140)
                     kind = 140;
                  { jjCheckNAdd(10); }
                  break;
               case 2:
                  if (kind > 90)
                     kind = 90;
                  jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 5:
                  if ((0x7fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(6, 7); }
                  break;
               case 6:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(6, 7); }
                  break;
               case 8:
                  if ((0x7fffffeL & l) == 0L)
                     break;
                  if (kind > 139)
                     kind = 139;
                  { jjCheckNAdd(9); }
                  break;
               case 9:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 139)
                     kind = 139;
                  { jjCheckNAdd(9); }
                  break;
               case 12:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(20, 22); }
                  break;
               case 14:
                  if (curChar == 92)
                     { jjAddStates(76, 80); }
                  break;
               case 15:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 16:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAdd(17); }
                  break;
               case 17:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(20, 22); }
                  break;
               case 18:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 19:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(25, 30); }
                  break;
               case 20:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(31, 34); }
                  break;
               case 21:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(35, 39); }
                  break;
               case 25:
                  if ((0xfedfffffffffffffL & l) != 0L)
                     { jjCheckNAddStates(20, 22); }
                  break;
               case 27:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(17, 19); }
                  break;
               case 29:
                  if (curChar == 92)
                     { jjAddStates(81, 85); }
                  break;
               case 30:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 31:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAdd(32); }
                  break;
               case 32:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(17, 19); }
                  break;
               case 33:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 34:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(44, 49); }
                  break;
               case 35:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(50, 53); }
                  break;
               case 36:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(54, 58); }
                  break;
               case 40:
                  if ((0xfedfffffffffffffL & l) != 0L)
                     { jjCheckNAddStates(17, 19); }
                  break;
               case 41:
                  if (curChar == 91)
                     { jjCheckNAddStates(120, 123); }
                  break;
               case 42:
                  if (curChar == 94)
                     { jjCheckNAddStates(124, 126); }
                  break;
               case 43:
                  if ((0xffffffffcfffffffL & l) != 0L)
                     { jjCheckNAddStates(90, 92); }
                  break;
               case 44:
                  if (curChar == 93 && kind > 151)
                     kind = 151;
                  break;
               case 45:
                  if (curChar == 92)
                     { jjAddStates(127, 131); }
                  break;
               case 46:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 47:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAdd(48); }
                  break;
               case 48:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(90, 92); }
                  break;
               case 49:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 50:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(93, 98); }
                  break;
               case 51:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(99, 102); }
                  break;
               case 52:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(103, 107); }
                  break;
               case 56:
                  if ((0xfedfffffffffffffL & l) != 0L)
                     { jjCheckNAddStates(90, 92); }
                  break;
               case 57:
                  if (curChar != 93)
                     break;
                  if (kind > 151)
                     kind = 151;
                  { jjCheckNAddStates(90, 92); }
                  break;
               case 58:
                  if (curChar == 92)
                     { jjAddStates(115, 119); }
                  break;
               case 59:
                  if ((0xfedfffffffffffffL & l) != 0L && kind > 149)
                     kind = 149;
                  break;
               case 63:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 64:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 149)
                     kind = 149;
                  { jjCheckNAddStates(112, 114); }
                  break;
               case 65:
                  if ((0x7e0000007eL & l) != 0L && kind > 149)
                     kind = 149;
                  break;
               case 66:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 149)
                     kind = 149;
                  { jjCheckNAdd(65); }
                  break;
               case 67:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 149)
                     kind = 149;
                  { jjCheckNAddTwoStates(65, 66); }
                  break;
               case 68:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 69:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAdd(65); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 5;
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 140)
                        kind = 140;
                     { jjCheckNAdd(10); }
                  }
                  break;
               case 1:
               case 10:
                  if (!jjCanMove_5(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 140)
                     kind = 140;
                  { jjCheckNAdd(10); }
                  break;
               case 2:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 90)
                     kind = 90;
                  jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 4:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if (jjCanMove_4(hiByte, i1, i2, l1, l2) && kind > 138)
                     kind = 138;
                  break;
               case 12:
               case 25:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(20, 22); }
                  break;
               case 27:
               case 40:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(17, 19); }
                  break;
               case 43:
               case 56:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(90, 92); }
                  break;
               case 59:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 149)
                     kind = 149;
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 70 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   4, 7, 8, 2, 5, 9, 12, 10, 69, 55, 6, 57, 58, 54, 55, 56, 
   57, 27, 28, 29, 12, 13, 14, 64, 65, 12, 17, 13, 14, 20, 21, 12, 
   17, 13, 14, 12, 17, 13, 14, 20, 12, 24, 13, 14, 27, 32, 28, 29, 
   35, 36, 27, 32, 28, 29, 27, 32, 28, 29, 35, 27, 39, 28, 29, 48, 
   49, 50, 62, 63, 67, 42, 43, 46, 51, 44, 9, 10, 15, 18, 22, 25, 
   23, 30, 33, 37, 40, 38, 59, 60, 6, 7, 43, 44, 45, 43, 48, 44, 
   45, 51, 52, 43, 48, 44, 45, 43, 48, 44, 45, 51, 43, 55, 44, 45, 
   65, 66, 67, 59, 60, 63, 68, 61, 42, 43, 45, 57, 43, 45, 57, 46, 
   49, 53, 56, 54, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec0[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec3[i2] & l2) != 0L);
      case 39:
         return ((jjbitVec4[i2] & l2) != 0L);
      default :
         if ((jjbitVec1[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec6[i2] & l2) != 0L);
      default :
         if ((jjbitVec5[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_3(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 39:
         return ((jjbitVec7[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_4(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 39:
         return ((jjbitVec8[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_5(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec9[i2] & l2) != 0L);
      case 39:
         return ((jjbitVec4[i2] & l2) != 0L);
      default :
         if ((jjbitVec1[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", "\111\116\124", "\123\124\122", "\111\104", 
"\111\156\163\164\162\165\143\164\151\157\156\163", "\111\156\163\164\162\165\143\164\151\157\156", "\124\171\160\145", 
"\111\146\124\141\151\154", "\104\145\143\154\141\162\141\164\151\157\156\163", 
"\111\156\164\145\147\145\162\163", "\114\141\142\145\154", "\101\162\147", "\124\171\160\145\114\151\163\164", 
"\103\157\156\163\164\141\156\164", "\111\144\145\156\164\151\146\151\145\162", "\122\145\147", 
"\104\145\143\154\141\162\141\164\151\157\156", "\105\170\160\162\145\163\163\151\157\156", 
"\105\170\160\162\145\163\163\151\157\156\114\151\163\164", "\114\157\143\141\154", 
"\124\171\160\145\111\144\145\156\164\151\146\151\145\162\124\141\151\154", "\123\164\141\164\145\155\145\156\164\163", "\101\146\164\145\162\61", 
"\101\162\147\165\155\145\156\164\123\151\147\156\141\164\165\162\145", "\120\162\157\147\162\141\155", "\122\145\147\163", 
"\123\164\141\164\145\155\145\156\164", "\123\151\147\156", "\103\157\155\160\165\164\145\144", "\115\145\155", 
"\111\156\164\145\147\145\162", "\122\163", "\106\124", "\123\164\162\151\156\147", "\117\160", 
"\105\170\160\162\145\163\163\151\157\156\114\151\163\164\124\141\151\154", "\124\171\160\145\114\151\163\164\124\141\151\154", 
"\103\157\155\160\151\154\145", "\120\62", "\120\62\114\157\141\144", "\120", "\104\163", "\106", "\101\123", 
"\101\123\62", "\123", "\123\151\156\147\154\145\123", "\105", 
"\101\144\144\103\157\156\163\164\141\156\164", "\101\144\144\103\157\156\163\164\141\156\164\61", 
"\101\144\144\103\157\156\163\164\141\156\164\62", "\111\155\155\145\144\151\141\164\145", 
"\122\145\146\145\162\145\156\143\145", "\122\145\147\114\157\143\141\154", 
"\106\162\141\155\145\114\157\143\141\154", "\104\141\164\141\61", "\112\157\151\156\61", "\120\61", "\120\61\104\163", 
"\104", "\104\165\155\155\171", "\106\162\141\155\145\101\143\143\145\163\163", 
"\106\162\141\155\145\101\143\143\145\163\163\61", "\106\162\141\155\145\101\143\143\145\163\163\62", "\116\157\122\163", 
"\115\157\122\163", "\101\160\160\145\156\144\122\163", "\130\122\145\147\163", 
"\130\122\145\147\163\61", "\130\122\145\147\163\62", "\116\157\106\124", "\115\157\106\124", 
"\101\160\160\145\156\144\106\124", "\137\137\110\101\103\123\137\137", null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, "\73", "\174", "\50", 
"\51", "\52", "\53", "\77", "\137", "\56", "\72", "\173", "\175", "\133", "\135", 
"\54", "\u2200", "\u2192", "\u2191", "\u2193", "\254", "\100", null, "\141\163", 
"\141\164\164\162\151\142\165\164\145", "\141\165\164\157\155\141\164\151\143", "\142\151\156\144\163", 
"\143\157\155\160\157\163\145", "\144\141\164\141", "\144\145\146\141\165\154\164", "\146\162\145\145", 
"\146\162\145\163\150", "\147\154\157\142\141\154", "\151\155\160\157\162\164", "\155\141\151\156", 
"\155\157\144\165\154\145", "\160\162\151\157\162\151\164\171", "\162\165\154\145", 
"\163\143\150\145\155\145", "\163\157\162\164", "\163\164\141\164\151\143", "\163\165\147\141\162", 
"\163\171\155\142\157\154", "\164\141\147", "\163\160\141\143\145", "\164\157\153\145\156", 
"\146\162\141\147\155\145\156\164", "\156\145\163\164\145\144", null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, "\136", "\135", "\55", null, "\1", null, null, };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         if (jjmatchedPos == 0 && jjmatchedKind > 79)
         {
            jjmatchedKind = 79;
         }
         break;
       case 3:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         if (jjmatchedPos == 0 && jjmatchedKind > 79)
         {
            jjmatchedKind = 79;
         }
         break;
       case 4:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_4();
         if (jjmatchedPos == 0 && jjmatchedKind > 83)
         {
            jjmatchedKind = 83;
         }
         break;
       case 5:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_5();
         break;
       case 6:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_6();
         if (jjmatchedPos == 0 && jjmatchedKind > 89)
         {
            jjmatchedKind = 89;
         }
         break;
       case 7:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_7();
         if (jjmatchedPos == 0 && jjmatchedKind > 89)
         {
            jjmatchedKind = 89;
         }
         break;
       case 8:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_8();
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           TokenLexicalActions(matchedToken);
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        MoreLexicalActions();
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 80 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                nesting = 1; nestedState = curLexState;
         break;
      case 81 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                    nesting += 1;
         break;
      case 82 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                    nesting -= 1; if (nesting<=0) SwitchTo(nestedState);
         break;
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      case 74 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                    nesting = 0; nestedState = curLexState;
         break;
      case 75 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                     nesting = 1;
         break;
      case 76 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                            nesting++;
         break;
      case 77 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                            if (--nesting <= 0) SwitchTo(HX_IN_CONCRETE);
         break;
      case 84 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                            nesting = 0; nestedState = curLexState;
         break;
      case 85 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                       nesting = 1;
         break;
      case 86 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                              nesting++;
         break;
      case 87 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                              if (--nesting <= 0) SwitchTo(IN_PP_UNCONCRETE);
         break;
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 78 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                        SwitchTo(nestedState);
         break;
      case 88 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                               SwitchTo(nestedState);
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public Pr3YunjianHxTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public Pr3YunjianHxTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream)
  {
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 70; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 9 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "HX_RE",
   "HX_IN_CONCRETE",
   "HX_IN_NESTED_CONCRETE",
   "HX_NESTED_COMMENT",
   "HX_PP",
   "IN_PP_UNCONCRETE",
   "IN_PP_NESTED_UNCONCRETE",
   "HX_CC",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 
   3, -1, -1, -1, -1, 4, -1, -1, -1, 6, 7, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xffffffffffffffffL, 0xfffffffff90043ffL, 0x7fa6ffffL, 
};
static final long[] jjtoSkip = {
   0x0L, 0x40f0000L, 0x0L, 
};
static final long[] jjtoMore = {
   0x0L, 0x2f0bc00L, 0x0L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[70];
    private final int[] jjstateSet = new int[2 * 70];

    private final StringBuilder jjimage = new StringBuilder();
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;
    
    protected char curChar;
}
