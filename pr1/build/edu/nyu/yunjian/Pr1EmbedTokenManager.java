/* Pr1EmbedTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. Pr1EmbedTokenManager.java */
package edu.nyu.yunjian;

/** Token Manager. */
@SuppressWarnings("unused")public class Pr1EmbedTokenManager implements Pr1EmbedConstants {
                    int nesting; int nestedState;

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_19(){
   switch(curChar)
   {
      case 10216:
         return jjStopAtPos(0, 88);
      case 10217:
         return jjStopAtPos(0, 91);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa0_11(){
   switch(curChar)
   {
      case 10216:
         return jjStopAtPos(0, 54);
      case 10217:
         return jjStopAtPos(0, 57);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa0_3(){
   switch(curChar)
   {
      case 10216:
         return jjStopAtPos(0, 8);
      case 10217:
         return jjStopAtPos(0, 11);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa0_2(){
   switch(curChar)
   {
      case 10216:
         return jjStopAtPos(0, 3);
      case 10217:
         return jjStopAtPos(0, 4);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa0_7(){
   switch(curChar)
   {
      case 10216:
         return jjStopAtPos(0, 25);
      case 10217:
         return jjStopAtPos(0, 28);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa0_4(){
   switch(curChar)
   {
      case 10216:
         return jjStopAtPos(0, 9);
      case 10217:
         return jjStopAtPos(0, 10);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa0_17(){
   switch(curChar)
   {
      case 10216:
         return jjStopAtPos(0, 81);
      case 10217:
         return jjStopAtPos(0, 84);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa0_5(){
   switch(curChar)
   {
      case 10216:
         return jjStopAtPos(0, 14);
      case 10217:
         return jjStopAtPos(0, 17);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa0_18(){
   switch(curChar)
   {
      case 10216:
         return jjStopAtPos(0, 82);
      case 10217:
         return jjStopAtPos(0, 83);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa0_16(){
   switch(curChar)
   {
      case 10216:
         return jjStopAtPos(0, 76);
      case 10217:
         return jjStopAtPos(0, 77);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa0_15(){
   switch(curChar)
   {
      case 10216:
         return jjStopAtPos(0, 75);
      case 10217:
         return jjStopAtPos(0, 78);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa0_1(){
   switch(curChar)
   {
      case 10216:
         return jjStopAtPos(0, 2);
      case 10217:
         return jjStopAtPos(0, 5);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa0_20(){
   switch(curChar)
   {
      case 10216:
         return jjStopAtPos(0, 89);
      case 10217:
         return jjStopAtPos(0, 90);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa0_21(){
   switch(curChar)
   {
      case 10216:
         return jjStopAtPos(0, 94);
      case 10217:
         return jjStopAtPos(0, 97);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa0_6(){
   switch(curChar)
   {
      case 10216:
         return jjStopAtPos(0, 15);
      case 10217:
         return jjStopAtPos(0, 16);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa0_10(){
   switch(curChar)
   {
      case 10216:
         return jjStopAtPos(0, 33);
      case 10217:
         return jjStopAtPos(0, 34);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa0_14(){
   switch(curChar)
   {
      case 10216:
         return jjStopAtPos(0, 61);
      case 10217:
         return jjStopAtPos(0, 62);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa0_23(){
   switch(curChar)
   {
      case 10216:
         return jjStopAtPos(0, 100);
      case 10217:
         return jjStopAtPos(0, 103);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa0_22(){
   switch(curChar)
   {
      case 10216:
         return jjStopAtPos(0, 95);
      case 10217:
         return jjStopAtPos(0, 96);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa0_12(){
   switch(curChar)
   {
      case 10216:
         return jjStopAtPos(0, 55);
      case 10217:
         return jjStopAtPos(0, 56);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa0_24(){
   switch(curChar)
   {
      case 10216:
         return jjStopAtPos(0, 101);
      case 10217:
         return jjStopAtPos(0, 102);
      default :
         return 1;
   }
}
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x18000000c00000L) != 0L || (active1 & 0x4002e8L) != 0L)
         {
            jjmatchedKind = 106;
            return 2;
         }
         if ((active0 & 0x1000000000000L) != 0L)
            return 19;
         return -1;
      case 1:
         if ((active1 & 0x40L) != 0L)
            return 2;
         if ((active0 & 0x18000000c00000L) != 0L || (active1 & 0x4002a8L) != 0L)
         {
            jjmatchedKind = 106;
            jjmatchedPos = 1;
            return 2;
         }
         return -1;
      case 2:
         if ((active0 & 0x800000L) != 0L || (active1 & 0x200L) != 0L)
            return 2;
         if ((active0 & 0x18000000400000L) != 0L || (active1 & 0x4000a8L) != 0L)
         {
            jjmatchedKind = 106;
            jjmatchedPos = 2;
            return 2;
         }
         return -1;
      case 3:
         if ((active0 & 0x400000L) != 0L || (active1 & 0x80L) != 0L)
            return 2;
         if ((active0 & 0x18000000000000L) != 0L || (active1 & 0x400028L) != 0L)
         {
            jjmatchedKind = 106;
            jjmatchedPos = 3;
            return 2;
         }
         return -1;
      case 4:
         if ((active1 & 0x20L) != 0L)
            return 2;
         if ((active0 & 0x10000000000000L) != 0L || (active1 & 0x400008L) != 0L)
         {
            jjmatchedKind = 106;
            jjmatchedPos = 4;
            return 2;
         }
         return -1;
      case 5:
         if ((active1 & 0x8L) != 0L)
            return 2;
         if ((active0 & 0x10000000000000L) != 0L || (active1 & 0x400000L) != 0L)
         {
            jjmatchedKind = 106;
            jjmatchedPos = 5;
            return 2;
         }
         return -1;
      case 6:
         if ((active1 & 0x400000L) != 0L)
         {
            jjmatchedKind = 106;
            jjmatchedPos = 6;
            return 2;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 49;
         return jjMoveStringLiteralDfa1_0(0x8000000000L, 0x0L);
      case 37:
         return jjStopAtPos(0, 47);
      case 38:
         jjmatchedKind = 50;
         return jjMoveStringLiteralDfa1_0(0x2000000000L, 0x0L);
      case 40:
         return jjStopAtPos(0, 19);
      case 41:
         return jjStopAtPos(0, 20);
      case 42:
         return jjStopAtPos(0, 21);
      case 43:
         return jjStopAtPos(0, 40);
      case 44:
         return jjStopAtPos(0, 30);
      case 45:
         return jjStopAtPos(0, 41);
      case 47:
         return jjStartNfaWithStates_0(0, 48, 19);
      case 59:
         return jjStopAtPos(0, 68);
      case 60:
         jjmatchedKind = 42;
         return jjMoveStringLiteralDfa1_0(0x80000000000L, 0x0L);
      case 61:
         jjmatchedKind = 72;
         return jjMoveStringLiteralDfa1_0(0x100000000000L, 0x0L);
      case 62:
         jjmatchedKind = 45;
         return jjMoveStringLiteralDfa1_0(0x400000000000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x400000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400000L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x800000L, 0x40L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x8000000000000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x10000000000000L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20L);
      case 123:
         return jjStopAtPos(0, 65);
      case 124:
         return jjMoveStringLiteralDfa1_0(0x4000000000L, 0x0L);
      case 125:
         return jjStopAtPos(0, 66);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStopAtPos(1, 37);
         break;
      case 61:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStopAtPos(1, 39);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStopAtPos(1, 43);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStopAtPos(1, 44);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStopAtPos(1, 46);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x200L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8L);
      case 102:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(1, 70, 2);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000L, active1, 0x20L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x80L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000L, active1, 0x400000L);
      case 124:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStopAtPos(1, 38);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x20L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x400000L);
      case 114:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(2, 73, 2);
         break;
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x80L);
      case 116:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(2, 23, 2);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8L);
      case 122:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x400000L);
      case 101:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(3, 71, 2);
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000000L, active1, 0x20L);
      case 114:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(3, 22, 2);
         break;
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 40:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStopAtPos(4, 51);
         break;
      case 101:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(4, 69, 2);
         break;
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x8L);
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x400000L);
      case 110:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(5, 67, 2);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 40:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStopAtPos(6, 52);
         break;
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, 0L, active1);
      return 7;
   }
   switch(curChar)
   {
      case 110:
         if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(7, 86, 2);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, 0L, active1);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec3 = {
   0x0L, 0x0L, 0x0L, 0x10000000000L
};
static final long[] jjbitVec4 = {
   0xffffff7ffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec5 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffcffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 172;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     { jjCheckNAdd(3); }
                  }
                  else if ((0x100000600L & l) != 0L)
                  {
                     if (kind > 105)
                        kind = 105;
                  }
                  else if (curChar == 47)
                     { jjAddStates(0, 1); }
                  else if (curChar == 34)
                     { jjCheckNAddStates(2, 5); }
                  else if (curChar == 36)
                  {
                     if (kind > 106)
                        kind = 106;
                     { jjCheckNAdd(2); }
                  }
                  break;
               case 19:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(22, 24); }
                  else if (curChar == 47)
                  {
                     if (kind > 105)
                        kind = 105;
                     { jjCheckNAdd(20); }
                  }
                  break;
               case 1:
                  if (curChar != 36)
                     break;
                  if (kind > 106)
                     kind = 106;
                  { jjCheckNAdd(2); }
                  break;
               case 2:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 106)
                     kind = 106;
                  { jjCheckNAdd(2); }
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 107)
                     kind = 107;
                  { jjCheckNAdd(3); }
                  break;
               case 4:
                  if (curChar == 34)
                     { jjCheckNAddStates(2, 5); }
                  break;
               case 5:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddStates(2, 5); }
                  break;
               case 6:
                  if (curChar == 34 && kind > 108)
                     kind = 108;
                  break;
               case 10:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(6, 10); }
                  break;
               case 11:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(11, 15); }
                  break;
               case 12:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(2, 5); }
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 15:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(2, 5); }
                  break;
               case 18:
                  if (curChar == 47)
                     { jjAddStates(0, 1); }
                  break;
               case 20:
                  if ((0xffffffffffffcbffL & l) == 0L)
                     break;
                  if (kind > 105)
                     kind = 105;
                  { jjCheckNAdd(20); }
                  break;
               case 21:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(22, 24); }
                  break;
               case 22:
                  if ((0xffffffffffffcbffL & l) != 0L)
                     { jjCheckNAddTwoStates(22, 24); }
                  break;
               case 23:
                  if (curChar == 47 && kind > 105)
                     kind = 105;
                  break;
               case 24:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 26:
                  if (curChar == 32)
                     { jjAddStates(16, 17); }
                  break;
               case 28:
                  if (curChar == 32)
                     { jjAddStates(18, 19); }
                  break;
               case 29:
                  if (kind > 1)
                     kind = 1;
                  break;
               case 39:
                  if (curChar == 32)
                     { jjAddStates(20, 21); }
                  break;
               case 41:
                  if (curChar == 32)
                     { jjAddStates(22, 23); }
                  break;
               case 42:
                  if (kind > 7)
                     kind = 7;
                  break;
               case 49:
                  if (curChar == 32)
                     { jjAddStates(24, 25); }
                  break;
               case 51:
                  if (curChar == 32)
                     { jjAddStates(26, 27); }
                  break;
               case 52:
                  if (kind > 13)
                     kind = 13;
                  break;
               case 58:
                  if (curChar == 32)
                     { jjAddStates(28, 29); }
                  break;
               case 60:
                  if (curChar == 32)
                     { jjAddStates(30, 31); }
                  break;
               case 61:
                  if (kind > 24)
                     kind = 24;
                  break;
               case 65:
                  if (curChar == 32)
                     { jjAddStates(32, 33); }
                  break;
               case 67:
                  if (curChar == 32)
                     { jjAddStates(34, 35); }
                  break;
               case 68:
                  if (kind > 31)
                     kind = 31;
                  break;
               case 78:
                  if (curChar == 32)
                     { jjAddStates(36, 37); }
                  break;
               case 80:
                  if (curChar == 32)
                     { jjAddStates(38, 39); }
                  break;
               case 81:
                  if (kind > 53)
                     kind = 53;
                  break;
               case 85:
                  if (curChar == 32)
                     { jjAddStates(40, 41); }
                  break;
               case 87:
                  if (curChar == 32)
                     { jjAddStates(42, 43); }
                  break;
               case 88:
                  if (kind > 59)
                     kind = 59;
                  break;
               case 98:
                  if (curChar == 32)
                     { jjAddStates(44, 45); }
                  break;
               case 100:
                  if (curChar == 32)
                     { jjAddStates(46, 47); }
                  break;
               case 101:
                  if (kind > 74)
                     kind = 74;
                  break;
               case 110:
                  if (curChar == 32)
                     { jjAddStates(48, 49); }
                  break;
               case 112:
                  if (curChar == 32)
                     { jjAddStates(50, 51); }
                  break;
               case 113:
                  if (kind > 80)
                     kind = 80;
                  break;
               case 128:
                  if (curChar == 32)
                     { jjAddStates(52, 53); }
                  break;
               case 130:
                  if (curChar == 32)
                     { jjAddStates(54, 55); }
                  break;
               case 131:
                  if (kind > 87)
                     kind = 87;
                  break;
               case 142:
                  if (curChar == 32)
                     { jjAddStates(56, 57); }
                  break;
               case 144:
                  if (curChar == 32)
                     { jjAddStates(58, 59); }
                  break;
               case 145:
                  if (kind > 93)
                     kind = 93;
                  break;
               case 162:
                  if (curChar == 32)
                     { jjAddStates(60, 61); }
                  break;
               case 164:
                  if (curChar == 32)
                     { jjAddStates(62, 63); }
                  break;
               case 165:
                  if (kind > 99)
                     kind = 99;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 2:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 106)
                     kind = 106;
                  { jjCheckNAdd(2); }
                  break;
               case 5:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(2, 5); }
                  break;
               case 7:
                  if (curChar == 92)
                     { jjAddStates(64, 66); }
                  break;
               case 8:
                  if (curChar == 92)
                     { jjCheckNAddStates(2, 5); }
                  break;
               case 9:
                  if (curChar == 92)
                     { jjAddStates(67, 68); }
                  break;
               case 13:
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 14:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 15:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(2, 5); }
                  break;
               case 16:
                  if (curChar == 110)
                     { jjCheckNAddStates(2, 5); }
                  break;
               case 17:
                  if (curChar == 116)
                     { jjCheckNAddStates(2, 5); }
                  break;
               case 20:
                  if (kind > 105)
                     kind = 105;
                  jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 22:
                  { jjAddStates(69, 70); }
                  break;
               case 27:
                  if (curChar == 114)
                     { jjAddStates(18, 19); }
                  break;
               case 29:
                  if (kind > 1)
                     kind = 1;
                  break;
               case 30:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 31:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 32:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 33:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 34:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 35:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 36:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 37:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 38:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 40:
                  if (curChar == 114)
                     { jjAddStates(22, 23); }
                  break;
               case 42:
                  if (kind > 7)
                     kind = 7;
                  break;
               case 43:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 44:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 45:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 46:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 47:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 48:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 50:
                  if (curChar == 103)
                     { jjAddStates(26, 27); }
                  break;
               case 52:
                  if (kind > 13)
                     kind = 13;
                  break;
               case 53:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 54:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 55:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 56:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 57:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 59:
                  if (curChar == 101)
                     { jjAddStates(30, 31); }
                  break;
               case 61:
                  if (kind > 24)
                     kind = 24;
                  break;
               case 62:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 63:
                  if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 64:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 66:
                  if (curChar == 114)
                     { jjAddStates(34, 35); }
                  break;
               case 68:
                  if (kind > 31)
                     kind = 31;
                  break;
               case 69:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 70:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 71:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 72:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 73:
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 74:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 75:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 76:
                  if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 77:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 79:
                  if (curChar == 114)
                     { jjAddStates(38, 39); }
                  break;
               case 81:
                  if (kind > 53)
                     kind = 53;
                  break;
               case 82:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 83:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 84:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 86:
                  if (curChar == 114)
                     { jjAddStates(42, 43); }
                  break;
               case 88:
                  if (kind > 59)
                     kind = 59;
                  break;
               case 89:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 86;
                  break;
               case 90:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 89;
                  break;
               case 91:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 90;
                  break;
               case 92:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 93:
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 92;
                  break;
               case 94:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 93;
                  break;
               case 95:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 94;
                  break;
               case 96:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 95;
                  break;
               case 97:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 96;
                  break;
               case 99:
                  if (curChar == 116)
                     { jjAddStates(46, 47); }
                  break;
               case 101:
                  if (kind > 74)
                     kind = 74;
                  break;
               case 102:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 99;
                  break;
               case 103:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 102;
                  break;
               case 104:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 103;
                  break;
               case 105:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 104;
                  break;
               case 106:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 105;
                  break;
               case 107:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 106;
                  break;
               case 108:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 107;
                  break;
               case 109:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 108;
                  break;
               case 111:
                  if (curChar == 114)
                     { jjAddStates(50, 51); }
                  break;
               case 113:
                  if (kind > 80)
                     kind = 80;
                  break;
               case 114:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 111;
                  break;
               case 115:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 114;
                  break;
               case 116:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 115;
                  break;
               case 117:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 116;
                  break;
               case 118:
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 117;
                  break;
               case 119:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 118;
                  break;
               case 120:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 119;
                  break;
               case 121:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 120;
                  break;
               case 122:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 121;
                  break;
               case 123:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 122;
                  break;
               case 124:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 123;
                  break;
               case 125:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 124;
                  break;
               case 126:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 125;
                  break;
               case 127:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 126;
                  break;
               case 129:
                  if (curChar == 110)
                     { jjAddStates(54, 55); }
                  break;
               case 131:
                  if (kind > 87)
                     kind = 87;
                  break;
               case 132:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 129;
                  break;
               case 133:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 132;
                  break;
               case 134:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 133;
                  break;
               case 135:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 134;
                  break;
               case 136:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 135;
                  break;
               case 137:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 136;
                  break;
               case 138:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 137;
                  break;
               case 139:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 138;
                  break;
               case 140:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 139;
                  break;
               case 141:
                  if (curChar == 68)
                     jjstateSet[jjnewStateCnt++] = 140;
                  break;
               case 143:
                  if (curChar == 114)
                     { jjAddStates(58, 59); }
                  break;
               case 145:
                  if (kind > 93)
                     kind = 93;
                  break;
               case 146:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 143;
                  break;
               case 147:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 146;
                  break;
               case 148:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 147;
                  break;
               case 149:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 148;
                  break;
               case 150:
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 149;
                  break;
               case 151:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 150;
                  break;
               case 152:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 151;
                  break;
               case 153:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 152;
                  break;
               case 154:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 153;
                  break;
               case 155:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 154;
                  break;
               case 156:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 155;
                  break;
               case 157:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 156;
                  break;
               case 158:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 157;
                  break;
               case 159:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 158;
                  break;
               case 160:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 159;
                  break;
               case 161:
                  if (curChar == 68)
                     jjstateSet[jjnewStateCnt++] = 160;
                  break;
               case 163:
                  if (curChar == 109)
                     { jjAddStates(62, 63); }
                  break;
               case 165:
                  if (kind > 99)
                     kind = 99;
                  break;
               case 166:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 163;
                  break;
               case 167:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 166;
                  break;
               case 168:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 167;
                  break;
               case 169:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 168;
                  break;
               case 170:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 169;
                  break;
               case 171:
                  if (curChar == 80)
                     jjstateSet[jjnewStateCnt++] = 170;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjAddStates(71, 94); }
                  break;
               case 5:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(2, 5); }
                  break;
               case 20:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 105)
                     kind = 105;
                  jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 22:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(69, 70); }
                  break;
               case 29:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 1)
                     kind = 1;
                  break;
               case 42:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 7)
                     kind = 7;
                  break;
               case 52:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 13)
                     kind = 13;
                  break;
               case 61:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 24)
                     kind = 24;
                  break;
               case 68:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 31)
                     kind = 31;
                  break;
               case 81:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 53)
                     kind = 53;
                  break;
               case 88:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 59)
                     kind = 59;
                  break;
               case 101:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 74)
                     kind = 74;
                  break;
               case 113:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 80)
                     kind = 80;
                  break;
               case 131:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 87)
                     kind = 87;
                  break;
               case 145:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 93)
                     kind = 93;
                  break;
               case 165:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 99)
                     kind = 99;
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 172 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_8(){
   switch(curChar)
   {
      case 10216:
         return jjStopAtPos(0, 26);
      case 10217:
         return jjStopAtPos(0, 27);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa0_9(){
   switch(curChar)
   {
      case 10216:
         return jjStopAtPos(0, 32);
      case 10217:
         return jjStopAtPos(0, 35);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa0_13(){
   switch(curChar)
   {
      case 10216:
         return jjStopAtPos(0, 60);
      case 10217:
         return jjStopAtPos(0, 63);
      default :
         return 1;
   }
}
static final int[] jjnextStates = {
   19, 21, 5, 6, 7, 9, 5, 6, 7, 9, 11, 5, 12, 6, 7, 9, 
   26, 38, 28, 29, 39, 48, 41, 42, 49, 57, 51, 52, 58, 64, 60, 61, 
   65, 77, 67, 68, 78, 84, 80, 81, 85, 97, 87, 88, 98, 109, 100, 101, 
   110, 127, 112, 113, 128, 141, 130, 131, 142, 161, 144, 145, 162, 171, 164, 165, 
   8, 16, 17, 10, 13, 22, 24, 26, 38, 39, 48, 49, 57, 58, 64, 65, 
   77, 78, 84, 85, 97, 98, 109, 110, 127, 128, 141, 142, 161, 162, 171, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 39:
         return ((jjbitVec3[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      case 39:
         return ((jjbitVec5[i2] & l2) != 0L);
      default :
         if ((jjbitVec4[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, "\50", "\51", "\52", "\143\150\141\162", 
"\151\156\164", null, null, null, null, null, null, "\54", null, null, null, null, null, null, 
"\46\46", "\174\174", "\41\75", "\53", "\55", "\74", "\74\75", "\75\75", "\76", 
"\76\75", "\45", "\57", "\41", "\46", "\156\165\154\154\50", 
"\163\151\172\145\157\146\50", null, null, null, null, null, null, null, null, null, null, null, null, 
"\173", "\175", "\162\145\164\165\162\156", "\73", "\167\150\151\154\145", "\151\146", 
"\145\154\163\145", "\75", "\166\141\162", null, null, null, null, null, null, null, null, null, 
null, null, null, "\146\165\156\143\164\151\157\156", null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 6)
         {
            jjmatchedKind = 6;
         }
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         if (jjmatchedPos == 0 && jjmatchedKind > 6)
         {
            jjmatchedKind = 6;
         }
         break;
       case 3:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         if (jjmatchedPos == 0 && jjmatchedKind > 12)
         {
            jjmatchedKind = 12;
         }
         break;
       case 4:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_4();
         if (jjmatchedPos == 0 && jjmatchedKind > 12)
         {
            jjmatchedKind = 12;
         }
         break;
       case 5:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_5();
         if (jjmatchedPos == 0 && jjmatchedKind > 18)
         {
            jjmatchedKind = 18;
         }
         break;
       case 6:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_6();
         if (jjmatchedPos == 0 && jjmatchedKind > 18)
         {
            jjmatchedKind = 18;
         }
         break;
       case 7:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_7();
         if (jjmatchedPos == 0 && jjmatchedKind > 29)
         {
            jjmatchedKind = 29;
         }
         break;
       case 8:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_8();
         if (jjmatchedPos == 0 && jjmatchedKind > 29)
         {
            jjmatchedKind = 29;
         }
         break;
       case 9:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_9();
         if (jjmatchedPos == 0 && jjmatchedKind > 36)
         {
            jjmatchedKind = 36;
         }
         break;
       case 10:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_10();
         if (jjmatchedPos == 0 && jjmatchedKind > 36)
         {
            jjmatchedKind = 36;
         }
         break;
       case 11:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_11();
         if (jjmatchedPos == 0 && jjmatchedKind > 58)
         {
            jjmatchedKind = 58;
         }
         break;
       case 12:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_12();
         if (jjmatchedPos == 0 && jjmatchedKind > 58)
         {
            jjmatchedKind = 58;
         }
         break;
       case 13:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_13();
         if (jjmatchedPos == 0 && jjmatchedKind > 64)
         {
            jjmatchedKind = 64;
         }
         break;
       case 14:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_14();
         if (jjmatchedPos == 0 && jjmatchedKind > 64)
         {
            jjmatchedKind = 64;
         }
         break;
       case 15:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_15();
         if (jjmatchedPos == 0 && jjmatchedKind > 79)
         {
            jjmatchedKind = 79;
         }
         break;
       case 16:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_16();
         if (jjmatchedPos == 0 && jjmatchedKind > 79)
         {
            jjmatchedKind = 79;
         }
         break;
       case 17:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_17();
         if (jjmatchedPos == 0 && jjmatchedKind > 85)
         {
            jjmatchedKind = 85;
         }
         break;
       case 18:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_18();
         if (jjmatchedPos == 0 && jjmatchedKind > 85)
         {
            jjmatchedKind = 85;
         }
         break;
       case 19:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_19();
         if (jjmatchedPos == 0 && jjmatchedKind > 92)
         {
            jjmatchedKind = 92;
         }
         break;
       case 20:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_20();
         if (jjmatchedPos == 0 && jjmatchedKind > 92)
         {
            jjmatchedKind = 92;
         }
         break;
       case 21:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_21();
         if (jjmatchedPos == 0 && jjmatchedKind > 98)
         {
            jjmatchedKind = 98;
         }
         break;
       case 22:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_22();
         if (jjmatchedPos == 0 && jjmatchedKind > 98)
         {
            jjmatchedKind = 98;
         }
         break;
       case 23:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_23();
         if (jjmatchedPos == 0 && jjmatchedKind > 104)
         {
            jjmatchedKind = 104;
         }
         break;
       case 24:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_24();
         if (jjmatchedPos == 0 && jjmatchedKind > 104)
         {
            jjmatchedKind = 104;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           TokenLexicalActions(matchedToken);
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        MoreLexicalActions();
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      case 1 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                                                        nesting = 0; nestedState = curLexState;
         break;
      case 2 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                         nesting = 1;
         break;
      case 3 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                                nesting++;
         break;
      case 4 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                                if (--nesting <= 0) SwitchTo(IN_META_Identifier);
         break;
      case 7 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                                                     nesting = 0; nestedState = curLexState;
         break;
      case 8 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                      nesting = 1;
         break;
      case 9 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                             nesting++;
         break;
      case 10 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                             if (--nesting <= 0) SwitchTo(IN_META_Integer);
         break;
      case 13 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                                                    nesting = 0; nestedState = curLexState;
         break;
      case 14 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                     nesting = 1;
         break;
      case 15 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                            nesting++;
         break;
      case 16 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                            if (--nesting <= 0) SwitchTo(IN_META_String);
         break;
      case 24 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                                                  nesting = 0; nestedState = curLexState;
         break;
      case 25 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                   nesting = 1;
         break;
      case 26 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                          nesting++;
         break;
      case 27 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                          if (--nesting <= 0) SwitchTo(IN_META_Type);
         break;
      case 31 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                                                        nesting = 0; nestedState = curLexState;
         break;
      case 32 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                         nesting = 1;
         break;
      case 33 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                                nesting++;
         break;
      case 34 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                                if (--nesting <= 0) SwitchTo(IN_META_Typehelper);
         break;
      case 53 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                                                  nesting = 0; nestedState = curLexState;
         break;
      case 54 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                   nesting = 1;
         break;
      case 55 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                          nesting++;
         break;
      case 56 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                          if (--nesting <= 0) SwitchTo(IN_META_Expr);
         break;
      case 59 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                                                        nesting = 0; nestedState = curLexState;
         break;
      case 60 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                         nesting = 1;
         break;
      case 61 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                                nesting++;
         break;
      case 62 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                                if (--nesting <= 0) SwitchTo(IN_META_Exprhelper);
         break;
      case 74 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                                                       nesting = 0; nestedState = curLexState;
         break;
      case 75 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                        nesting = 1;
         break;
      case 76 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                               nesting++;
         break;
      case 77 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                               if (--nesting <= 0) SwitchTo(IN_META_Statement);
         break;
      case 80 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                                                             nesting = 0; nestedState = curLexState;
         break;
      case 81 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                              nesting = 1;
         break;
      case 82 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                                     nesting++;
         break;
      case 83 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                                     if (--nesting <= 0) SwitchTo(IN_META_Statementhelper);
         break;
      case 87 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                                                         nesting = 0; nestedState = curLexState;
         break;
      case 88 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                          nesting = 1;
         break;
      case 89 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                                 nesting++;
         break;
      case 90 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                                 if (--nesting <= 0) SwitchTo(IN_META_Declaration);
         break;
      case 93 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                                                               nesting = 0; nestedState = curLexState;
         break;
      case 94 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                                nesting = 1;
         break;
      case 95 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                                       nesting++;
         break;
      case 96 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                                       if (--nesting <= 0) SwitchTo(IN_META_Declarationhelper);
         break;
      case 99 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                                                     nesting = 0; nestedState = curLexState;
         break;
      case 100 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                      nesting = 1;
         break;
      case 101 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                             nesting++;
         break;
      case 102 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                             if (--nesting <= 0) SwitchTo(IN_META_Program);
         break;
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 5 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                                  SwitchTo(nestedState);
         break;
      case 11 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                            SwitchTo(nestedState);
         break;
      case 17 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                          SwitchTo(nestedState);
         break;
      case 28 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                      SwitchTo(nestedState);
         break;
      case 35 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                                  SwitchTo(nestedState);
         break;
      case 57 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                      SwitchTo(nestedState);
         break;
      case 63 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                                  SwitchTo(nestedState);
         break;
      case 78 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                                SwitchTo(nestedState);
         break;
      case 84 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                                            SwitchTo(nestedState);
         break;
      case 91 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                                    SwitchTo(nestedState);
         break;
      case 97 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                                                SwitchTo(nestedState);
         break;
      case 103 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                            SwitchTo(nestedState);
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public Pr1EmbedTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public Pr1EmbedTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream)
  {
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 172; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 25 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "IN_META_Identifier",
   "IN_NESTED_META_Identifier",
   "IN_META_Integer",
   "IN_NESTED_META_Integer",
   "IN_META_String",
   "IN_NESTED_META_String",
   "IN_META_Type",
   "IN_NESTED_META_Type",
   "IN_META_Typehelper",
   "IN_NESTED_META_Typehelper",
   "IN_META_Expr",
   "IN_NESTED_META_Expr",
   "IN_META_Exprhelper",
   "IN_NESTED_META_Exprhelper",
   "IN_META_Statement",
   "IN_NESTED_META_Statement",
   "IN_META_Statementhelper",
   "IN_NESTED_META_Statementhelper",
   "IN_META_Declaration",
   "IN_NESTED_META_Declaration",
   "IN_META_Declarationhelper",
   "IN_NESTED_META_Declarationhelper",
   "IN_META_Program",
   "IN_NESTED_META_Program",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, 1, 2, -1, -1, -1, -1, 3, 4, -1, -1, -1, -1, 5, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, 
   8, -1, -1, -1, -1, -1, 9, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, 11, 12, -1, -1, -1, -1, 13, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15, 
   16, -1, -1, -1, -1, 17, 18, -1, -1, -1, -1, -1, 19, 20, -1, -1, -1, -1, 21, 22, -1, -1, -1, -1, 23, 
   24, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0x821fffe850fa0821L, 0x1c82085043feL, 
};
static final long[] jjtoSkip = {
   0x0L, 0x20000000000L, 
};
static final long[] jjtoMore = {
   0x7de00017af05f7deL, 0x17df7afbc01L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[172];
    private final int[] jjstateSet = new int[2 * 172];

    private final StringBuilder jjimage = new StringBuilder();
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;
    
    protected char curChar;
}
